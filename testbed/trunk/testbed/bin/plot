#!/bin/bash
IO_COMMAND="$0 $@"

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/configuration
source $LIB_PATH/opts
source $LIB_PATH/tcpdump
source $LIB_PATH/tcp
source $LIB_PATH/ping
source $LIB_PATH/plots

# Globals
FILE_TYPES="dump ping probe"
DEFAULT_PLOTS_DIR=plots

usage()
{
	prog=$(basename $0)
	cat <<- EOF
		usage: $prog [-f file] [-d directory]

		will generate graph from a data file. It can be tcp probe log, tcpdump log or ping log.
		If plot exist, it will not generate a plot. Use -n to force regeneration of plots.

		EXAMPLE: $prog  -f file
		         $prog  -d /dir/to/files

		OPTIONS:
			-f	datafile - tcpdump, tcpprobe, ping ...
			-d	generate plots for all the data files supported found in the directory
			-n	force overwrite of plots.
			-h	Show this message
			-v 	verbose
			-x	debug
		EOF
}

get_opts()
{
	while getopts "t:d:f:nvhx" options; do
		case $options in
			f) DATAFILE=$OPTARG;;
			d) DIRECTORY=$OPTARG;;
			n) OVERWRITE_PLOTS=1;;
			v) VERBOSE=1;;
			x) DEBUG=1;;
			h) usage
			   exit;;
			*) usage
			   exit 1;;
		esac
	done
}

check_for_required_opts()
{
	if [[ -z $DATAFILE && -z $DIRECTORY ]]
	then 
		usage
		exit 1
	fi
}

process_options()
{
	opts_check_for_no_opts
	get_opts $OPTS_ARGS
	check_for_required_opts
	[[ ! -z $DATAFILE ]] && io_exit_if_path_is_not_valid $DATAFILE
	[[ ! -z $DIRECTORY ]] && io_exit_if_directory_is_not_valid $DIRECTORY
}

get_datafile_extention()
{
	local filename=$1
	local filetype=
	
	for i in $FILE_TYPES
	do
		echo $filename | egrep -q "\.$i$|\.$i\.gz$"
		[[ $? == 0 ]] && filetype=$i
	done
	if [[ -z $filetype ]]
	then
		io_exit_with_error "can't recognize file extention"
	else
		echo $filetype
	fi
}

generate_dump_image()
{
	local filename=$1
	local datafile=$2
	verbose "Generating tcpdump plot for $filename"
}

generate_ping_image()
{
	local filename=$1
	local datafile=$2
	verbose "Generating ping plot for $filename"
	ping_plot_rtt_in_time $datafile $filename
}

generate_probe_image()
{
	local filename=$1
	local datafile=$2
	verbose "Generating probe plot for $filename"
	tcp_plot_cwnd_and_throughput $filename $datafile
}

plot_files_exist()
{
	local file=$1
	local file_basename=$(basename $file)
	local file_dir=$(dirname $file)
	find $file_dir -type f -name "$file_basename*"
}

generate_plots_for_file()
{
	local file=$1
	local ext=$(get_datafile_extention $file)
	local datafile_uncompressed=$(io_uncompress_file $file)
	local plot_output_dir="$(dirname $file)/$DEFAULT_PLOTS_DIR"
	create_directory $plot_output_dir
	local plot_filename_prefix="$plot_output_dir/$(basename $file)"
	
	if [[ -z $(plot_files_exist $plot_filename_prefix) || $OVERWRITE_PLOTS ]]; then
		# dispatch the right generator
		generate_${ext}_image $plot_filename_prefix $datafile_uncompressed
	fi

	# clean
	release_temp_file $datafile_uncompressed
}

generate_plots_for_directory()
{
	local dir=$1
	verbose "working on directory $dir"
	for t in $FILE_TYPES
	do
		verbose "searching for $t files"
		local file=
		for file in $(find $dir -name "*$t.gz" -or -name "*$t")
		do
			generate_plots_for_file $file
		done
	done
}

main()
{
	configuration_load
	process_options
	[[ ! -z $DATAFILE ]] && generate_plots_for_file $DATAFILE
	[[ ! -z $DIRECTORY ]] && generate_plots_for_directory $DIRECTORY
}
main
