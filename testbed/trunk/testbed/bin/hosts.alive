#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/remote
source $LIB_PATH/opts

# Globals
NMAP_SSH_COMMAND="nmap -P0 -p 22" 
NMAP_PING_COMMAND="nmap -sP" 
DEAD_HOSTS=

usage()
{
	prog=`basename $0`
	cat <<- EOF
		usage: $prog -n number [-v] [-x]

		Check links between testbed hosts. It will check wired and wireless links
		EXAMPLE: $prog  -n 16 -v -x 

		OPTIONS:
			-n	number of clients to test together
			-c	clients (just a list of clients eg. "3,16,7,9")
			-h	Show this message
			-v 	verbose
			-x	debug
		EOF
}

get_opts()
{
	while getopts "n:c:vhx" options; do
		case $options in
			n) END=$OPTARG;;
			c) CLIENTS=`echo $OPTARG | tr ',' ' '`;;
			v) VERBOSE=1;;
			x) DEBUG=1;;
			h) usage
			   exit;;
			*) usage
			   exit 1;;
		esac
	done
}

check_for_required_opts()
{
	check_clients_opts
}

process_options()
{
	check_for_no_opts
	get_opts $OPTS
	check_for_required_opts
	combine_clients_opts
}

ping_scan_on_host()
{
	local host=$1
	verbose "ping scan on $host"
	$NMAP_PING_COMMAND $host | grep --quiet "1 host up"
	[[ $? -gt 0 ]] && echo $host #host is down
}

scan_host_ssh_port()
{
	local host=$1
	verbose "scanning $host ssh port"
	$NMAP_SSH_COMMAND $host \
		| egrep -B 2 "filtered|closed" \
		| grep Interesting \
		| cut -d ' ' -f 4
}

scan_host_ssh_port_from_remote_host()
{
	local src=$1
	local dst=$2
	remote_run_command_on_client root $src "$NMAP_SSH_COMMAND $dst" \
		| egrep -B 2 "filtered|closed" \
		| grep Interesting \
		| cut -d ' ' -f 4 
}

print_no_ping()
{
	local src=$1
	local dst=$2
	error "$src -> $dst no ping"
}

print_port_closed()
{
	local src=$1
	local dst=$2
	error "$src -> $dst SSH port closed"
}

generate_list_of_wireless_hosts()
{
	echo " $(generate_list_of_testbed_hosts)" \
		| sed 's/ router//' \
		| sed 's/ / w/g'
}

generate_list_of_testbed_hosts()
{
	local hosts="ap src router"
	for c in $CLIENTS
	do
		hosts="$hosts client$c"
	done
	local hosts_up=
	for h in $hosts
	do
		echo $DEAD_HOSTS | grep --quiet $h
		[[ $? -ne 0 ]] && hosts_up="$hosts_up $h"
	done
	echo $hosts_up
}

check_connection_from_host_to_wireless_hosts()
{
	local host=$1
	verbose "Checking connection from $host to all wireless hosts"
	local ret=$(scan_host_ssh_port $host)
	[[ -n $ret ]] \
		&& error "SSH port on $host is closed. Can't check for wireless connection from $host to wireless hosts" \
		&& exit
	for h in $(generate_list_of_wireless_hosts)
	do
		local ret=$(scan_host_ssh_port_from_remote_host $host $h)
		[[ -n $ret ]] && print_port_closed $host $h
	done
}

check_connection_of_wireless_hosts()
{
	check_connection_from_host_to_wireless_hosts ap
	check_connection_from_host_to_wireless_hosts src
}

check_connection_from_testbed_to_hosts()
{
	for h in $(generate_list_of_testbed_hosts)
	do
		local ret=$(scan_host_ssh_port $h)
		[[ -n $ret ]] && print_port_closed $(hostname) $h
	done
}

ping_hosts()
{
	for h in $(generate_list_of_testbed_hosts)
	do
		local ret=$(ping_scan_on_host $h)
		[[ -n $ret ]] && DEAD_HOSTS="$DEAD_HOSTS $h"
		[[ -n $ret ]] && print_no_ping $(hostname) $h
	done
}

main()
{
	process_options
	io_global_testbed_lock
	ping_hosts
	check_connection_from_testbed_to_hosts
	check_connection_of_wireless_hosts
	io_global_testbed_release_lock
}
main
