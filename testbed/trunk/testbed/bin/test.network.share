#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/opts
source $LIB_PATH/tcpdump
source $LIB_PATH/802.11b
source $LIB_PATH/wireless
source $LIB_PATH/madwifi

# Globals
END=
CLIENTS=
TEST_OUTPUT_DIR=
TIMES=
BANDWIDTHS=
PLOTS= # default no plots
NO_PLOTS= # Initial value will generate plots
DIR_FOR_PLOTS="plots"
STATES_RELATIVE_DIR="states"
IPERF_PORT=5001

usage()
{
	prog=`basename $0`
	cat <<- EOF
		usage: $prog -d directory -t seconds -b bandwidth -n number [-p] [-v]

		This script will run udp test of shering network. It will issue all the clients at the same time to send udp to the access point.
		EXAMPLE: $prog  -d test_dir -t "10,20,300" -b "2,4,30" -n 16 -v

		OPTIONS:
			-d	directory for results
			-t	times in seconds to test
			-b	bandwidths to test
			-n	number of clients to test together
			-c	clients (just a list of clients eg. "3,16,7,9")
			-p	generate just plots (without running experiment)
			-g	don't generate plots
			-h	Show this message
			-v 	verbose
			-x	debug
		EOF
}

get_opts()
{
	while getopts "d:t:b:n:c:pgvhx" options; do
		case $options in
			d) TEST_OUTPUT_DIR=$OPTARG;;
			t) TIMES=`echo $OPTARG | tr ',' ' '`;;
			b) BANDWIDTHS=`echo $OPTARG | tr ',' ' '`;;
			n) END=$OPTARG;;
			c) CLIENTS=`echo $OPTARG | tr ',' ' '`;;
			p) PLOTS=1;;
			g) NO_PLOTS=1;;
			v) VERBOSE=1;;
			x) DEBUG=1;;
			h) usage
			   exit;;
			*) usage
			   exit 1;;
		esac
	done
}

check_for_required_opts()
{
	if [[ -z $TEST_OUTPUT_DIR || -z $TIMES || -z $BANDWIDTHS ]]
	then 
		usage
		exit 1
	fi

	# or clients list or end number of clients
	if [[ -z $END && -z $CLIENTS ]]
	then 
		echo "You should provide -n or -c"
		usage
		exit 1
	fi
}

combine_clients_opts()
{
	if [[ ! -z $END ]]; then
		# we got -n, so we'll convert to $CLIENTS
		CLIENTS=`seq -s ' ' $START $END`
	fi
}

process_options()
{
	check_for_no_opts
	get_opts $OPTS
	check_for_required_opts
	[[ -z $PLOTS ]] && check_directory $TEST_OUTPUT_DIR
	combine_clients_opts
}

make_results_dir()
{
	local duration=$1
	local bandwidth=$2
	local dir="$TEST_OUTPUT_DIR/time.${duration}.bandwidth.${bandwidth}"
	create_directory $dir
}

# save the state information of the client
get_client_state()
{
	local dir=$1
	local pids=
	local state_dir="$dir/$STATES_RELATIVE_DIR"
	mkdir -p $state_dir
	
	for c in $CLIENTS
	do 
		verbose "Getting client$c state data"
		ssh root@client$c "ifconfig 2>/dev/null ; iwconfig 2>/dev/null ; iwpriv ath0 2>/dev/null" > $state_dir/client$c.state &
		pids="$pids $!"
	done

	wait_for_pids $pids
}

start_logging()
{
	tcpdump_start_logging ap ath1 $IPERF_PORT
	tcpdump_start_logging src eth0 $IPERF_PORT
	madwifi_start_timing_logging_on_all_clients
}

end_logging()
{
	for srv in ap src
	do
		tcpdump_stop_logging $srv
		tcpdump_move_dumpfile $srv $dir
	done
	madwifi_stop_timing_logging_on_all_clients
	madwifi_move_timing_dumpfile_for_all_clients $dir
}

run_single_test()
{
	local t=$1
	local b=$2
	local first_run=
	local pids=

	local dir=`make_results_dir $t $b`
	get_client_state $dir
	verbose "Running $t seconds test with $b bandwidth"
	start_logging
	sleep 3
	for c in $CLIENTS
	do 
		verbose "Running iperf on client$c"
		local tput_options="-o -s client$c -u src -d wsrc -t $t -b $b -v"
		[[ -n $first_run ]] && tput_options="$tput_options -k"
		tput  $tput_options 2>&1 >> $dir/client${c} &
		pids="$pids $!"
		first_run=1
	done
	wait_for_pids $pids
	end_logging
}

iterate_time_and_bandwidth()
{
	for t in $TIMES
	do
		for b in $BANDWIDTHS
		do
			run_single_test $t $b 
		done
	done
}

kill_iperf_server()
{
	local pid=`ps fax | grep "tput" | grep -v grep | cut -c 0-5`
	kill $pid
}

plot_png()
{
	local data_file=$1
	local output_file_name=$2
	local title=$3
	local xlabel=$4
	local ylabel=$5
	local cols=$6
	gnuplot <<- EOF
		set term png size 400,300
		set title "$title"
		set boxwidth 0.5
		set xtics 1
		set style fill solid 0.25 border
		set xlabel '$xlabel'
		set output '$output_file_name.png'
		set ylabel '$ylabel'
		set yrange [0:]
		set xrange [0:]
		plot "$data_file" using $cols with boxes title ''
		EOF
}

convert_mb_to_kb()
{
	local str=$1
	local num=`echo $str | cut -d ' ' -f 1`
	local scale=`echo $str | cut -d ' ' -f 2`
	if [[ $scale == 'Mbits/sec' || $scale == 'MBytes' ]]; then 
		num=$(echo "$num*1000" | bc)
	fi
	echo $num
}

generate_data_file()
{
	local data_file=$1
	local input_data_directory=$2
	for c in $CLIENTS
	do
		local tmp=`grep '%' $input_data_directory/client$c`
		local total=`echo $tmp | cut -d ' ' -f 5-6`
		local bit_per_sec=`echo $tmp | cut -d ' ' -f 7-8`
		total=`convert_mb_to_kb "$total"`
		bit_per_sec=`convert_mb_to_kb "$bit_per_sec"`
		echo "$c $total $bit_per_sec" >> $data_file
	done
}

generate_index_file()
{
	local dir=$1
	local html=$dir/index.html
	echo "<html><body>" > $html
	for i in $(cd $dir && find -name '*png' | sort -n -t t -k 9,9n)
	do
		echo "<img align='center' src='$i' alt='' />" >> $html
	done
	echo "</html></body>" >> $html
}

generate_plots()
{
	local t=
	local b=
	local plots_dir=$TEST_OUTPUT_DIR/$DIR_FOR_PLOTS
	mkdir -p $plots_dir

	for t in $TIMES
	do
		for b in $BANDWIDTHS
		do
			local file_name="iperf.time.$t.bandwidth.${b}m"
			local plot_file_name="$plots_dir/iperf.time.$t.bandwidth.${b}m"
			local plot_title="udp\n($CLIENTS -> src)\nDuration:$t Bandwidth:${b}m"
			local workdir="$TEST_OUTPUT_DIR/time.$t.bandwidth.$b"

			local data_file=`create_temp_file`
			generate_data_file $data_file $workdir
			plot_png $data_file "$plot_file_name.total_mb" "Iperf $plot_title" "Clients" "KBytes" "1:2"
			plot_png $data_file "$plot_file_name.kbits_per_sec" "Iperf $plot_title" "Clients" "Kbits/sec" "1:3"
			release_temp_file $data_file

			generate_tcpdump_plots "$workdir" "$plots_dir" "$file_name" "$plot_title"
		done
	done
	generate_index_file $plots_dir
}

main()
{
	process_options
	if [[ -z $PLOTS ]]; then
		wireless_atheros_set_no_accel_to_network
		wireless_set_all_clients_minimum_txpower
		wireless_802_11b_set_network
		iterate_time_and_bandwidth
	fi
	if [[ -z $NO_PLOTS ]]; then
		generate_plots
	fi
}
main
