#!/bin/bash
IO_COMMAND="$0 $@"

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/opts
source $LIB_PATH/tcpdump
source $LIB_PATH/wireless
source $LIB_PATH/madwifi
source $LIB_PATH/tcp
source $LIB_PATH/iperf
source $LIB_PATH/router
source $LIB_PATH/plots

# Globals
END=
CLIENTS=
TEST_OUTPUT_DIR=
TIMES=
TCP_SOURCE=
PLOTS= # default no plots
NO_PLOTS= # Initial value will generate plots
DIR_FOR_PLOTS="plots"
STATES_RELATIVE_DIR="states"
UDP_CLIENTS=
LINK_CAPASITY=40 # total mb the network can handle
TCP_CLIENT=

usage()
{
	prog=`basename $0`
	cat <<- EOF
		usage: $prog -d directory -t seconds -u number [-w size] [-m wireless mode] [-p] [-v] 

		will run TCP related tests

		EXAMPLE: $prog  -d test_dir -t "10,20,300" -u 2 -v -m 11g

		OPTIONS:
			-d	directory for results
			-t	times in seconds to test
			-s	by default clients are the source, this will 
				make wsrc as the source and clients as the destinations
			-n	number of clients to test together
			-c	clients (just a list of clients eg. "3,16,7,9")
			-u	number of backround udp clients
			-w	tcp window size (default 10MB)
			-m	network mode 11b(default), 11g
			-p	generate just plots (without running experiment)
			-g	don't generate plots
			-h	Show this message
			-v 	verbose
			-x	debug
		EOF
}

get_opts()
{
	while getopts "d:t:n:c:u:w:m:spgvhx" options; do
		case $options in
			d) TEST_OUTPUT_DIR=$OPTARG;;
			t) TIMES=`echo $OPTARG | tr ',' ' '`;;
			s) TCP_SOURCE="wsrc";;
			n) END=$OPTARG;;
			c) CLIENTS=$(opts_get_clients_list $OPTARG);;
			u) UDP_CLIENTS=$(opts_get_clients_list $OPTARG);;
			m) WIRELESS_802_11x_MODE=$OPTARG;;
			p) PLOTS=1;;
			g) NO_PLOTS=1;;
			v) VERBOSE=1;;
			x) DEBUG=1;;
			h) usage
			   exit;;
			*) usage
			   exit 1;;
		esac
	done
}

check_for_required_opts()
{
	if [[ -z $TEST_OUTPUT_DIR || -z $TIMES ]]
	then 
		usage
		exit 1
	fi
	if [[ -z $UDP_CLIENTS ]]
	then
		opts_check_clients_opts
	else
		if [[ -z $(opts_check_for_one_input $CLIENTS) ]]
		then
			error "you should provide just one client with -c to be the TCP client"
			usage
			exit 1
		else
			TCP_CLIENT="client$CLIENTS"
		fi
	fi
	if [[ -n $(wireless_802_11x_check_mode $WIRELESS_802_11x_MODE) ]]
	then
		error "No wireless mode \"$WIRELESS_802_11x_MODE\""
		exit 1
	fi
}

process_options()
{
	opts_check_for_no_opts
	get_opts $OPTS
	check_for_required_opts
	[[ -z $PLOTS ]] && check_directory $TEST_OUTPUT_DIR
	opts_combine_clients_opts
}

make_results_dir()
{
	local duration=$1
	local dir="$TEST_OUTPUT_DIR/time.${duration}"
	create_directory $dir
	echo $dir
}

get_results_dir()
{
	local duration=$1
	local dir="$TEST_OUTPUT_DIR/time.${duration}"
	echo $dir
}

start_logging()
{
	local tcpprobe_host=$1
	local madwifi_host=$2
	local tcpdump_host=$3
	tcp_start_tcpprobe_logging $tcpprobe_host $IPERF_TCP_PORT
	remote_start_kmsg_logging $madwifi_host
	tcpdump_start_logging $tcpdump_host ath0 $IPERF_TCP_PORT
}

stop_logging()
{
	local tcpprobe_host=$1
	local madwifi_host=$2
	local tcpdump_host=$3
	local dir=$4
	tcp_stop_tcpprobe_logging $tcpprobe_host
	tcp_save_tcpprobe_log_file $tcpprobe_host $dir
	remote_stop_kmsg_logging $madwifi_host
	tcpdump_stop_logging $tcpdump_host $dir
}

run_iperf_servers()
{
	iperf_run_udp_server src 2>&1 > /dev/null &
	iperf_run_tcp_server src 2>&1 > /dev/null &
}

generate_udp_background_flows()
{
	local t=$1
	local tcp_client=$TCP_CLIENT
	local bandwidth=$(echo $LINK_CAPASITY/$(echo $UDP_CLIENTS | tr ',' ' ' | wc --words) | bc)
	local first_run=
	local pids=
	local dir=$(make_results_dir $t)

	run_iperf_servers
	tcp_change_ca_algorithm_on_client reno src
	tcp_change_ca_algorithm_on_client reno $tcp_client
	wireless_set_wifi0_txqueue_length_to_minimum $tcp_client
	start_logging $tcp_client $tcp_client ap

	for c in $(echo $UDP_CLIENTS | tr ',' ' ')
	do 
		local udp_time=$(echo $t+5 | bc)
		verbose "Running iperf UDP on client$c for $udp_time sec with $bandwidth mb"
		local tput_options="-o -s client$c -u src -d wsrc -t $udp_time -b $bandwidth -v"
		[[ -n $first_run ]] && tput_options="$tput_options -k"
		tput  $tput_options 2>&1 >> "$dir/UDP.client${c}.time.$udp_time.bandwidth.$bandwidth" &
		pids="$pids $!"
		first_run=1
	done

	verbose "Running iperf TCP on $tcp_client for $t sec"
	iperf_run_tcp_client_once $tcp_client wsrc $t 2>&1 >> "$dir/TCP.$tcp_client.time.$t" &
	pids="$pids $!"
	wait_for_pids $pids
	stop_logging $tcp_client $tcp_client ap $dir
}

run_iperf_server_on_all_clients()
{
	local tcp_algorithm=$1
	local pids=
	iperf_kill_on_all_testbed

	for c in $CLIENTS
	do 
		local client="client$c"
		tcp_change_ca_algorithm_on_client $tcp_algorithm $client &
		pids="$pids $!"
		wireless_set_wifi0_txqueue_length_to_minimum $client &
		pids="$pids $!"
		iperf_run_tcp_server $client 2>&1 > /dev/null &
		pids="$pids $!"
	done
	wait_for_pids $pids
}

run_tcp_flow_src_to_clients()
{
	local dir=$1
	local pids=
	for c in $CLIENTS
	do 
		local src="src"
		local dst="wclient$c"
		local log=$(iperf_get_log_filename $src $dst $dir $t tcp)
		iperf_run_tcp_client_once $src $dst $t 2>&1 >> $log &
		pids="$pids $!"
	done
	wait_for_pids $pids
}

run_tcp_flow()
{
	local src=$1
	local dst=$2
	local dir=$3
	local t=$4
	local log=$(iperf_get_log_filename $src $dst $dir $t tcp)
	iperf_run_tcp_client_once $src $dst $t 2>&1 >> $log
}

run_tcp_flow_from_clients_to_src()
{
	local t=$1
	local dir=$(make_results_dir $t)
	local iperf_server_pid=
	io_do_for_all_hosts tcp_start_tcpprobe_logging $IPERF_TCP_PORT
	io_do_for_all_wireless_hosts remote_start_kmsg_logging
	tcpdump_start_logging src eth0 $IPERF_TCP_PORT
	tcpdump_start_logging ap ath0 $IPERF_TCP_PORT

	iperf_run_tcp_server src 2>&1 > /dev/null &
	io_do_for_all_wclients run_tcp_flow wsrc $dir $t

	tcpdump_stop_logging ap $dir
	tcpdump_stop_logging src $dir
	io_do_for_all_wireless_hosts remote_stop_kmsg_logging $dir
	io_do_for_all_hosts tcp_stop_tcpprobe_logging $dir
}

generate_tcp_flows_from_src_to_clients()
{
	local t=$1
	local dir=$(make_results_dir $t)

	tcp_change_ca_algorithm_on_client reno src
	start_logging src ap ap
	run_iperf_server_on_all_clients reno
	run_tcp_flow_from_src_to_clients $dir
	stop_logging src ap ap $dir
	iperf_kill_on_all_testbed
}

set_wireless()
{
	io_do_for_all_wireless_hosts remote_network_interface_reset ath0
	io_do_for_all_wireless_hosts wireless_set_minimum_txpower 
	io_do_for_all_wireless_hosts wireless_set_atheros_no_acceleration
	wireless_802_11x_set_network $WIRELESS_802_11x_MODE
	io_do_for_all_wireless_hosts wireless_set_wifi0_txqueue_length_to_minimum
	io_do_for_all_wireless_hosts wireless_set_channel ath0 $WIRELESS_CHANNEL
}

generate_plots()
{
	local host=$1
	local t=
	local plots_dir=$TEST_OUTPUT_DIR/$DIR_FOR_PLOTS
	create_directory $plots_dir

	for t in $TIMES
	do
		verbose_bold "Working on plots with time $t"
		local udp_flows=$(echo $UDP_CLIENTS | wc --words)
		if [[ $udp_flows -gt 0 ]]; then
			local description="time: $t sec\nTCP flow: $TCP_CLIENT -> src\n$udp_flows UDP flows: clients $(echo $UDP_CLIENTS | tr ' ' ',') -> src"
		else
			local description="time: $t sec\nTCP flow: $CLIENTS -> src"
		fi
		local workdir=$(get_results_dir $t)
		local file_name="iperf.time.$t"
		local plot_file_name="$plots_dir/iperf.time.$t"
		tcp_plot_srtt_vs_raw_rtt $t $host $workdir $plots_dir "$description"
		tcp_plot_madwifi_queue_vs_rawrtt $t $host $workdir $plots_dir "$description"
		#generate_tcpdump_plots "$workdir" "$plots_dir" "$file_name" "$description"
		iperf_plot_stats src "$workdir" $t "$plot_file_name" "$description"
		io_do_for_all_wireless_hosts madwifi_plot_queue_occupancy_vs_queueing_delay "$workdir" "$plot_file_name" "$description"
		io_do_for_all_wireless_hosts madwifi_plot_queue_drain_time_stats "$workdir" "$plot_file_name" "$description"
		#madwifi_plot_queue_in_time_for_all_clients "$workdir" "$plot_file_name" "$description"
	done
	plots_generate_index_file $plots_dir
}

run_test()
{
	set_wireless
	local t=
	for t in $TIMES
	do
		verbose_bold "Running test for time $t"
		if [[ -z $TCP_SOURCE ]]; then
			if [[ -n $UDP_CLIENTS ]]; then
				generate_udp_background_flows $t
			else
				run_tcp_flow_from_clients_to_src $t
			fi
		else
			generate_tcp_flows_from_src_to_clients $t
		fi
	done
}

main()
{
	process_options
	io_backup_commad $TEST_OUTPUT_DIR
	if [[ -z $PLOTS ]]; then
		io_global_testbed_lock
		router_flush_dummynet router
		run_test
		router_flush_dummynet router
		io_global_testbed_release_lock
	fi
	if [[ -z $NO_PLOTS ]]; then
		if [[ -n $TCP_SOURCE ]]; then
			generate_plots src
		else
			if [[ -n $UDP_CLIENTS ]]; then
				generate_plots $TCP_CLIENT
			else
				generate_plots
			fi
		fi
	fi
}
main
