#!/bin/bash

# Globals
VERBOSE= # no verbos
DEBUG= # no debug

# Colors
COLOR_LIGHT_BLUE="\033[1;34m"
COLOR_LIGHT_GREEN="\033[1;32m"
COLOR_LIGHT_CYAN="\033[1;36m"
COLOR_LIGHT_RED="\033[1;31m"
COLOR_LIGHT_PURPLE="\033[1;35m"
COLOR_YELLOW="\033[1;33m"
COLOR_WHITE="\033[1;37m"
COLOR_NO_COLOR="\033[0m"

VERBOSE_COLOR=$COLOR_YELLOW
DEBUG_COLOR=$COLOR_LIGHT_GREEN
ERROR_COLOR=$COLOR_LIGHT_RED
BOLD_COLOR=$COLOR_LIGHT_BLUE

# gets string to output and optional options to echo (-n for example)
verbose()
{
	local str=$1
	local options=$2
	if [[ -n $VERBOSE ]]; then
		echo -en "${VERBOSE_COLOR}verbose: $COLOR_NO_COLOR" >&2
		echo $options "$str" >&2
	fi
}

verbose_bold()
{
	local str=$1
	local options=$2
	verbose "$BOLD_COLOR$str$COLOR_NO_COLOR" "-e $options"
}

debug()
{
	local str=$1
	local options=$2
	if [[ -n $DEBUG ]]; then
		echo -en "${DEBUG_COLOR}debug: $COLOR_NO_COLOR" >&2
		echo $options "$str" >&2
	fi
}

debug_cat_file()
{
	local file=$1
	local name=$2
	if [[ -n $DEBUG ]]; then
		debug "Printing file: $file"
		[[ -n $name ]] && debug "File name is: $name"
		debug "-----------------------------------------------------"
		cat $file >&2
	fi
}

error()
{
	local str=$1
	local options=$2
	echo -en "${ERROR_COLOR}error: $COLOR_NO_COLOR" >&2
	echo $options "$str" >&2
}

create_temp_file()
{
	local prog_name=$(basename $0)
	local user=$(whoami)
	local file_name=$(mktemp -t $user.$prog_name.XXXXXX)
	if [[ $? != 0 ]]; then
		echo "can't create temp file"
		exit 1
	fi
	echo $file_name
}

# gets temp file to delete
release_temp_file()
{
	rm -f $1
}

create_directory()
{
	local dir=$1
	mkdir -p $dir
	if [[ -d $dir ]]; then
		verbose "Directory '$dir' created"
	else
		error "Error: cann't create directory \"$dir\""
		exit 1
	fi
}

check_directory()
{
	local dir=$1
	if [[ -d $dir ]]; then
		error "directory \"$dir\" exists!"
		error "I will not write on existing directory."
		exit 1
	fi
}

# gets number
# if this number is zero, then it prints yes, else no
verbose_yes_no()
{
	local val=$1
	if [[ $val == 0 ]]; then
		verbose "[Yes]"
	else
		verbose "[No]"
	fi
}

# gets a list of pids and wait on them until all are done
wait_for_pids()
{
	local pids="$@"
	for p in $pids
	do
		debug "waiting for pid $p to finish"
		wait $p
	done
}
