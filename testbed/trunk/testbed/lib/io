#!/bin/bash

# Globals
VERBOSE= # no verbos
DEBUG= # no debug
#IO_COMMAND= # needs to be defined at the start of the program like that IO_COMMAND="$0 $@"
IO_COMMAND_HISTORY_FILE=command_history
IO_COMPRESS_COMMAND="gzip -c"
IO_UNCOMPRESS_COMMAND="gzip -cd"
IO_VERBOSE_ERROR_DEBUG_OUT=">&2"

# Colors
COLOR_LIGHT_BLUE="\033[1;34m"
COLOR_LIGHT_GREEN="\033[1;32m"
COLOR_LIGHT_CYAN="\033[1;36m"
COLOR_LIGHT_RED="\033[1;31m"
COLOR_LIGHT_PURPLE="\033[1;35m"
COLOR_YELLOW="\033[1;33m"
COLOR_WHITE="\033[1;37m"
COLOR_NO_COLOR="\033[0m"

VERBOSE_COLOR=$COLOR_YELLOW
DEBUG_COLOR=$COLOR_LIGHT_GREEN
ERROR_COLOR=$COLOR_LIGHT_RED
BOLD_COLOR=$COLOR_LIGHT_BLUE
YES_COLOR=$COLOR_LIGHT_CYAN
NO_COLOR=$COLOR_LIGHT_PURPLE

IO_LOCK_FILE="/tmp/$(hostname).lock"

io_get_log_date()
{
	date +"%Y.%m.%d %H:%M:%S"
}

# gets string to output and optional options to echo (-n for example)
verbose()
{
	local str=$1
	local options=$2
	if [[ -n $VERBOSE ]]; then
		echo -en "$(io_get_log_date) ${VERBOSE_COLOR}verbose: $COLOR_NO_COLOR" >&2
		echo $options "$str" >&2
	fi
}

verbose_bold()
{
	local str=$1
	local options=$2
	verbose "$BOLD_COLOR$str$COLOR_NO_COLOR" "-e $options"
}

debug()
{
	local str=$1
	local options=$2
	if [[ -n $DEBUG ]]; then
		echo -en "$(io_get_log_date) ${DEBUG_COLOR}debug: $COLOR_NO_COLOR" >&2
		echo $options "$str" >&2
	fi
}

debug_cat_file()
{
	local file=$1
	local name=$2
	if [[ -n $DEBUG ]]; then
		debug "Printing file: $file"
		[[ -n $name ]] && debug "File name is: $name"
		debug "-----------------------------------------------------"
		cat $file >&2
	fi
}

error()
{
	local str=$1
	local options=$2
	echo -en "$(io_get_log_date) ${ERROR_COLOR}error: $COLOR_NO_COLOR" >&2
	echo $options "$str" >&2
}

create_temp_file()
{
	local prog_name=$(basename $0)
	local user=$(whoami)
	local file_name=$(mktemp -t $user.$prog_name.XXXXXX)
	if [[ $? != 0 ]]; then
		error "can't create temp file"
		exit 1
	fi
	echo $file_name
}

# gets temp file to delete
release_temp_file()
{
	local file=$1
	[[ -e $file ]] && rm -f $file
}

create_directory()
{
	local dir=$1
	mkdir -p $dir
	if [[ -d $dir ]]; then
		debug "Directory $dir created"
	else
		error "Error: cann't create directory \"$dir\""
		exit 1
	fi
}

check_directory()
{
	local dir=$1
	if [[ -d $dir ]]; then
		error "directory \"$dir\" exists!"
		error "I will not write on existing directory."
		exit 1
	fi
}

# gets number
# if this number is zero, then it prints yes, else no
yes_no()
{
	local val=$1
	if [[ $val == 0 ]]; then
		echo -e "[${YES_COLOR}Yes${COLOR_NO_COLOR}]" >&2
	else
		echo -e "[${NO_COLOR}No${COLOR_NO_COLOR}]" >&2
	fi
}

debug_yes_no()
{
	local val=$1
	[[ -n $DEBUG ]] && yes_no $val
}

verbose_yes_no()
{
	local val=$1
	[[ -n $VERBOSE ]] && yes_no $val
}

# gets a list of pids and wait on them until all are done
wait_for_pids()
{
	local pids="$@"
	for p in $pids
	do
		debug "waiting for pid $p to finish"
		wait $p
	done
}

io_global_testbed_lock()
{
	verbose "creating lock file: $IO_LOCK_FILE"
	if [[ -f $IO_LOCK_FILE ]]; then
		error "lock file exists: $IO_LOCK_FILE"
		error "check if other user or script is already running"
		exit 1
	else
		touch $IO_LOCK_FILE
	fi
}

io_global_testbed_release_lock()
{
	if [[ -f $IO_LOCK_FILE ]]; then
		verbose "releasing lock file: $IO_LOCK_FILE"
		rm $IO_LOCK_FILE
	fi
}

io_backup_commad()
{
	local workdir=$1
	create_directory $workdir
	echo "$(io_get_log_date) $IO_COMMAND" >> $workdir/$IO_COMMAND_HISTORY_FILE
}

io_sum_column_in_file()
{
	local file=$1
	local col=$2
	local count=0
	local i=0
	for i in $(cat $file | cut -d ' ' -f $col)
	do
		count=$(echo "$count+$i" | bc)
	done
	echo $count
}

# lets you run a function for all clients. 
# the first argument of the function should be the client name. 
# you shuld provide the other input vars after the function name. 
io_do_for_all_clients()
{
        local function_name=$1
        shift
        local function_input=$@
	local pids=
        for c in $CLIENTS
        do
                $function_name client$c $function_input &
		pids="$pids $!"
        done
	wait_for_pids $pids
}

io_do_for_all_wclients()
{
        local function_name=$1
        shift
        local function_input=$@
	local pids=
        for c in $CLIENTS
        do
                $function_name wclient$c $function_input &
		pids="$pids $!"
        done
	wait_for_pids $pids
}

io_do_for_all_wireless_hosts()
{
        local function_name=$1
        shift
        local function_input=$@
        $function_name ap $function_input
	io_do_for_all_clients $function_name $function_input
}

io_do_for_all_hosts()
{
        local function_name=$1
        shift
        local function_input=$@
        $function_name src $function_input
	io_do_for_all_wireless_hosts $function_name $function_input
}

io_kill_pid()
{
	local pid=$1
	if [[ -n $(ps -ef | awk '{print $2}' | egrep "^$pid\$") ]]; then
		kill $pid
	fi
}

io_check_if_file_exsist()
{
	local file=$1
	if [[ -N $file ]]; then
		echo "yes"
	fi
}

# this function returns tempfile with the content uncompressed. 
# you should release this file, when you finish with it.
io_uncompress_file()
{
	local file=$1
	local filetype=$(file $file | awk '{print $2}')
	debug "uncompressing $filetype $file"
	local uncompressed_file=$(create_temp_file)
	case $filetype in
		bzip2)	bzcat $file > $uncompressed_file;;
		gzip)	gzip -cd $file > $uncompressed_file;;
		*)	cp $file $uncompressed_file;;
	esac
	echo $uncompressed_file
}
