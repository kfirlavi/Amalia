#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/remote
source $LIB_PATH/tcp

# Globals
IPERF_UDP_PORT=5001
IPERF_TCP_PORT=5002

# need to delete this function when find a solution to the >&2
iperf_verbose()
{
	local str=$1
	local options=$2
	if [[ -n $VERBOSE ]]; then
		echo $options "$str"
	fi
}

iperf_kill_process()
{
	local host=$1
	local protocol=$2 # udp,tcp default is killing all
	local client=$3
	iperf_check_if_iperf_running $host $protocol
	local running=$?
	local kill_command="killall iperf"
	local command_prefix="ps fax | grep iperf | grep"
	[[ -n $clinet ]] && command_prefix="$command_prefix $client | grep"
	local command_suffix="| grep -v grep | awk '{print \$1}' | xargs kill"
	case $protocol in
		udp) kill_command="$command_prefix $IPERF_UDP_PORT $command_suffix" ;;
		tcp) kill_command="$command_prefix $IPERF_TCP_PORT $command_suffix" ;;
	esac
	while [[ $running == 0 ]]; do
		verbose "killing iperf $protocol on $host"
		remote_run_command_on_client root $host "$kill_command"
		iperf_check_if_iperf_running $host $protocol
		running=$?
	done
}

iperf_kill_on_all_testbed()
{
	local pids=
	for host in ap src $(echo " $CLIENTS" | sed 's/ / client/g')
	do 
		iperf_kill_process $host udp 2>&1 > /dev/null &
		pids="$pids $!"
		iperf_kill_process $host tcp 2>&1 > /dev/null &
		pids="$pids $!"
	done
	wait_for_pids $pids
}

# gets host
iperf_check_if_iperf_running()
{
	local host=$1
	local protocol=$2 # udp, tcp or default is all
	local client=$3
	local command="ps fax | grep iperf | grep -v grep"
	local command_prefix="ps -ef | grep iperf | grep"
	[[ -n $clinet ]] && command_prefix="$command_prefix $client | grep"
	local command_suffix="| grep -v grep"
	case $protocol in
		udp) command="$command_prefix $IPERF_UDP_PORT $command_suffix" ;;
		tcp) command="$command_prefix $IPERF_TCP_PORT $command_suffix" ;;
	esac
	remote_run_command_on_client root $host "$command" 2>&1 > /dev/null
	local ret=$?
	debug "is iperf running on $host? " "-n"
	debug_yes_no $ret
	return $ret
}

# gets host 
iperf_check_if_it_listen()
{
	local host=$1
	local protocol=$2 # udp, tcp or nothing means all
	local command="netstat --listening --program --$protocol"
	case $protocol in
		udp) command="$command --udp" ;;
		tcp) command="$command --tcp" ;;
	esac
	command="$command | grep iperf"
	remote_run_command_on_client root $host "$command" 2>&1 > /dev/null
	local ret=$?
	debug "is $host listening on iperf $protocol? " "-n"
	debug_yes_no $ret
	return $ret
}

# runs iperf sever on destination
# gets destination utility address
iperf_run_udp_server()
{
	local dst=$1
	iperf_kill_process $dst udp
	iperf_check_if_it_listen $dst udp
	local listen=$?
	while [[ $listen > 0 ]]; do
		iperf_verbose "Setup iperf on $dst"
		local command="iperf --udp --server --port $IPERF_UDP_PORT --interval 1 --format m"
		remote_run_command_on_client root $dst "$command 2> /dev/null" &
		sleep 2
		iperf_check_if_it_listen $dst udp
		local listen=$?
	done
}

# gets output
get_loss_from_iperf_client_output()
{
	local output=$1
	local loss=`echo $output | cut -d '(' -f 3 | cut -d '%' -f 1`
	echo $loss
}

# runs iperf client on src
# gets source utility address
#      dest test address 
#      time
#      bandwidth
run_iperf_client_once()
{
	local src=$1
	local dst=$2
	local time=$3
	local bandwidth=$4
	iperf_kill_process $src udp
	verbose "Run iperf udp on $src -> $dst port=$IPERF_TCP_PORT with time=$time and bandwidth=$bandwidth"
	iperf_verbose "Run iperf on $src -> $dst"
	local command="iperf --udp --port $IPERF_UDP_PORT --client $dst --time $time --bandwidth ${bandwidth}m"
	local ret=$(remote_run_command_on_client root $src "$command")
	iperf_verbose "$ret"
	local loss=$(get_loss_from_iperf_client_output "$ret")
	iperf_verbose "iperf $src -> $dst time:$time bandwidth:${bandwidth}m loss:$loss"
}

# run a server on $dst with TCP protocol
iperf_run_tcp_server()
{
	local dst=$1
	iperf_kill_process $dst tcp
	iperf_check_if_it_listen $dst tcp
	local listen=$?
	while [[ $listen > 0 ]]; do
		verbose "Setup iperf TCP server on $dst"
		local command="iperf --server --port $IPERF_TCP_PORT --window $TCP_WINDOW --interval 1 --format m"
		remote_run_command_on_client root $dst "$command 2>&1 > /dev/null" &
		sleep 2
		iperf_check_if_it_listen $dst tcp
		local listen=$?
	done
}

iperf_run_tcp_client_once()
{
	local src=$1
	local dst=$2
	local time=$3
	local window=${4:-$TCP_WINDOW}
	local util_src=$(echo $src | sed 's/wclient/client/')
	#iperf_kill_process $util_src tcp $dst
	verbose "Run iperf tcp on $src -> $dst port=$IPERF_TCP_PORT with time=$time and window=$window"
	local command="iperf --port $IPERF_TCP_PORT --window $window --client $dst --time $time"
	remote_run_command_on_client root $util_src "$command 2>&1 > /dev/null"
}

iperf_get_log_filename()
{
	local src=$1
	local dst=$2
	local dir=$3
	local t=$4
	local protocol=$5
	local log=
	[[ $protocol == udp ]] && \
		log="$dir/UDP.flow.from.$src.to.$dst.for.time.$t"
	[[ $protocol == tcp ]] && \
		log="$dir/TCP.flow.from.$src.to.$dst.for.time.$t"
	echo $log
}

iperf_plot_stats()
{
	local dst=$1
	local dir=$2
	local t=$3
	local filename_prefix=$4.stats
	local title=$5
	local datafile=$filename_prefix.data
	iperf_generate_stats_datafile $src $dst $dir $t > $datafile
	local col_move=0.2 # will move by 0.2 the columen to the right or left, so two columns can be seen in the plot
	gnuplot <<- EOF
		set term png size $(plots_get_plot_size)
		set output "$filename_prefix.png"
		set title "iperf stats\n$title"
		set boxwidth 0.3
		set xtics 1
		set style fill solid 0.25 border
		set xlabel 'client'
		set xrange [0:]
		set ylabel 'Total KBytes'
		set yrange [0:]
		set y2label 'Kbits/sec'
		set y2range [0:]
		set y2tics
		set ytics nomirror
		plot "$datafile" using (\$1-$col_move):2 with boxes title 'Total KBytes' axes x1y1, \
			'' using (\$1+$col_move):3 with boxes title 'Kbits/sec' axes x1y2

		$(plots_replot_eps $filename_prefix)
		EOF
}

iperf_generate_stats_datafile()
{
	local dst=$1
	local dir=$2
	local t=$3
	echo "# client_number total_kbytes_sent kbits_per_second"
	for c in $CLIENTS
	do
		local log=$(iperf_get_log_filename wclient$c w$dst $dir $t tcp)
		local line=$(grep 'bits' $log | grep -v "0.00")
		if [[ -n $line ]]; then
			local total=$(echo $line | cut -d ' ' -f 5-6)
			local bit_per_sec=$(echo $line | cut -d ' ' -f 7-8)
			total=$(iperf_convert_mb_to_kb "$total")
			bit_per_sec=$(iperf_convert_mb_to_kb "$bit_per_sec")
			echo "$c $total $bit_per_sec"
		else
			echo "$c 0 0"
		fi
	done
}

iperf_convert_mb_to_kb()
{
	local str=$1
	local num=`echo $str | cut -d ' ' -f 1`
	local scale=`echo $str | cut -d ' ' -f 2`
	if [[ $scale == 'Mbits/sec' || $scale == 'MBytes' ]]; then 
		num=$(echo "$num*1000" | bc)
	fi
	echo $num
}
