#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/remote
source $LIB_PATH/tcp

# Globals
IPERF_UDP_PORT=5001
IPERF_TCP_PORT=5001


# need to delete this function when find a solution to the >&2
iperf_verbose()
{
	local str=$1
	local options=$2
	if [[ -n $VERBOSE ]]; then
		echo $options "$str"
	fi
}
# need to delete this function when find a solution to the >&2
iperf_verbose_yes_no()
{
	local val=$1
	if [[ $val == 0 ]]; then
		iperf_verbose "[Yes]"
	else
		iperf_verbose "[No]"
	fi
}

iperf_kill_process()
{
	local host=$1
	local protocol=$2 # udp,tcp default is killing all
	local client=$3
	iperf_check_if_iperf_running $host $protocol
	local running=$?
	local kill_command="killall iperf"
	local command_prefix="ps -ef | grep iperf | grep"
	[[ -n $clinet ]] && command_prefix="$command_prefix $client | grep"
	local command_suffix="| grep -v grep | tr -s ' ' | cut -d ' ' -f 2 | xargs kill"
	case $protocol in
		udp) kill_command="$command_prefix $IPERF_UDP_PORT $command_suffix" ;;
		tcp) kill_command="$command_prefix $IPERF_TCP_PORT $command_suffix" ;;
	esac
	while [[ $running == 0 ]]; do
		iperf_verbose "Killing iperf..."
		verbose "killing iperf $protocol on $host"
		ssh root@$host $kill_command
		iperf_check_if_iperf_running $host $protocol
		running=$?
	done
}

iperf_kill_on_all_testbed()
{
	local pids=
	for host in ap src $(echo " $CLIENTS" | sed 's/ / client/g')
	do 
		iperf_kill_process $host udp 2>&1 > /dev/null &
		pids="$pids $!"
		iperf_kill_process $host tcp 2>&1 > /dev/null &
		pids="$pids $!"
	done
	wait_for_pids $pids
}

# gets host
iperf_check_if_iperf_running()
{
	local host=$1
	local protocol=$2 # udp, tcp or default is all
	local client=$3
	iperf_verbose "Checking if iperf is running on $host..." "-n"
	local command="ps fax | grep iperf | grep -v grep"
	local command_prefix="ps -ef | grep iperf | grep"
	[[ -n $clinet ]] && command_prefix="$command_prefix $client | grep"
	local command_suffix="| grep -v grep"
	case $protocol in
		udp) command="$command_prefix $IPERF_UDP_PORT $command_suffix" ;;
		tcp) command="$command_prefix $IPERF_TCP_PORT $command_suffix" ;;
	esac
	ssh root@$host "$command" > /dev/null
	local ret=$?
	iperf_verbose_yes_no $ret
	return $ret
}

# gets host 
iperf_check_if_it_listen()
{
	local host=$1
	local protocol=$2 # udp, tcp or nothing means all
	iperf_verbose "Checking if $host is listening..." "-n"
	local command="netstat --listening --program --$protocol"
	case $protocol in
		udp) command="$command --udp" ;;
		tcp) command="$command --tcp" ;;
	esac
	command="$command | grep iperf"
	ssh root@$host "$command" > /dev/null
	local ret=$?
	iperf_verbose_yes_no $ret
	return $ret
}

# runs iperf sever on destination
# gets destination utility address
iperf_run_udp_server()
{
	local dst=$1
	iperf_kill_process $dst udp
	iperf_check_if_it_listen $dst udp
	local listen=$?
	while [[ $listen > 0 ]]; do
		iperf_verbose "Setup iperf on $dst"
		ssh root@$dst "iperf --udp --server --port $IPERF_UDP_PORT --interval 1 --format m" > /tmp/$dst.iperf &
		sleep 2
		iperf_check_if_it_listen $dst udp
		local listen=$?
	done
}

# gets output
get_loss_from_iperf_client_output()
{
	local output=$1
	local loss=`echo $output | cut -d '(' -f 3 | cut -d '%' -f 1`
	echo $loss
}

# runs iperf client on src
# gets source utility address
#      dest test address 
#      time
#      bandwidth
run_iperf_client_once()
{
	local src=$1
	local dst=$2
	local time=$3
	local bandwidth=$4
	iperf_kill_process $src udp
	verbose "Run iperf udp on $src -> $dst port=$IPERF_TCP_PORT with time=$time and bandwidth=$bandwidth"
	iperf_verbose "Run iperf on $src -> $dst"
	local ret=$(ssh root@$src "iperf --udp --port $IPERF_UDP_PORT --client $dst --time $time --bandwidth ${bandwidth}m")
	iperf_verbose "$ret"
	local loss=$(get_loss_from_iperf_client_output "$ret")
	iperf_verbose "iperf $src -> $dst time:$time bandwidth:${bandwidth}m loss:$loss"
}

# run a server on $dst with TCP protocol
iperf_run_tcp_server()
{
	local dst=$1
	iperf_kill_process $dst tcp
	iperf_check_if_it_listen $dst tcp
	local listen=$?
	while [[ $listen > 0 ]]; do
		iperf_verbose "Setup iperf TCP server on $dst"
		ssh root@$dst "iperf --server --port $IPERF_TCP_PORT --window $TCP_WINDOW --interval 1 --format m" > /tmp/$dst.iperf &
		sleep 2
		iperf_check_if_it_listen $dst tcp
		local listen=$?
	done
}

iperf_run_tcp_client_once()
{
	local src=$1
	local dst=$2
	local time=$3
	iperf_kill_process $src tcp $dst
	verbose "Run iperf tcp on $src -> $dst port=$IPERF_TCP_PORT with time=$time and window=$TCP_WINDOW"
	iperf_verbose "Run iperf TCP on $src -> $dst"
	local ret=$(ssh root@$src "iperf --port $IPERF_TCP_PORT --window $TCP_WINDOW --client $dst --time $time")
	iperf_verbose "$ret"
}
