#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/remote

# Globals
TCPDUMP_THROUGHPUT_IN_TIME_START=0
TCPDUMP_THROUGHPUT_IN_TIME_THROUGHPUT_PLOTS_DURATION=20
TCPDUMP_THROUGHPUT_IN_TIME_MAX_PACKETS_SEND=0
HOSTNAME_PREFIX="192.168.2."
THROUGHPUT_PLOTS_START_TIME=0
THROUGHPUT_PLOTS_DURATION=60
MAX_PACKETS_SEND=0
#PNG_SIZE="1024,768"
PNG_SIZE="400,300"
TCPDUMP_CLIENTS_DUMPFILE_DIRECTORY="/tmp"
TCPDUMP_CLIENTS_DUMPFILE_SUFFIX=".dump"

# will search the tcpdump file for the time that the last station started to send
# then we can consider the experiment as started
# gets tcpdump file
# returns the line number
find_start_of_experiment()
{
	local data_file=$1
	local line=0
	for c in $CLIENTS
	do 
		local new=`first_packet_sent_by_host $data_file "$HOSTNAME_PREFIX$c"`
		[[ $new -gt $line ]] && line=$new
	done
	echo $line
}

# will search the tcpdump file for the time that the first station finished sending
# then we can consider the experiment as finished
# gets tcpdump file
# returns the line number
find_end_of_experiment()
{
	local data_file=$1
	local line=`cat $data_file | wc -l` # max line number 
	for c in $CLIENTS
	do 
		local new=`last_packet_sent_by_host $data_file "$HOSTNAME_PREFIX$c"`
		[[ $new -lt $line ]] && line=$new
		debug "last packet sent by $HOSTNAME_PREFIX$c is in line $new in the file $data_file"
	done
	echo $line
}

# return line number in tcpdump file
first_packet_sent_by_host()
{
	local data_file=$1
	local pattern=`host_pattern_for_grep $2`
	local second=`grep --max-count=1 "$pattern" $data_file | cut -d '.' -f 1`
	((second++)) # return the next second which every client had at most one second to start
	grep --max-count=1 --line-number "$second" $data_file | cut -d ':' -f 1
}

# return line number in tcpdump file
last_packet_sent_by_host()
{
	local data_file=$1
	local pattern=`host_pattern_for_grep $2`
	local line=`grep "$pattern" $data_file`
	if [[ -n $line ]]; then
		local second=$(grep "$pattern" $data_file | tail -1 | cut -d '.' -f 1)
		#((second--)) # return the previouse second which every client had at least one second to finish
		local line_number=`grep --line-number "$second" $data_file | tail -1 | cut -d ':' -f 1`
		echo $((line_number+1))
	else 
		# this is if a station don't have lines in the file
		# return the last line in the file
		local total_lines=$(cat $data_file | wc -l)
		debug "$total_lines lines in $data_file"
		echo $total_lines
	fi
}

host_pattern_for_grep()
{
	local host=`escape_dots $1`
	echo "$host\..* >.*$IPERF_PORT"
}

escape_dots()
{
	echo $1 | sed 's/\./\\\./g'
}

generate_tcpdump_start_to_end_of_experiment()
{
	local dump_file=$1
	local start_line=`find_start_of_experiment $dump_file`
	local end_line=`find_end_of_experiment $dump_file`
	debug "chopping $dump_file from $start_line to $end_line" # debug
	tail -n $end_line $dump_file | head -n $((end_line-start_line+1))
}

get_total_packets_sent_by_client()
{
	local data_file=$1
	local pattern=`host_pattern_for_grep $2`
	grep "$pattern" $data_file | cut -d ' ' -f 1 | sort | uniq | wc -l
}

generate_data_file_for_tcpdump_total_mb()
{
	local data_file=$1
	local input_data_directory=$2
	local ap_dump_file=`create_temp_file`
	local src_dump_file=`create_temp_file`
	local experiment_dump_file=`create_temp_file`
	for srv in ap src
	do
		
		local tcp_dump_file="$input_data_directory/$srv.dump"
		local tmp_file=
		if [[ $srv == "ap" ]]; then 
			tmp_file=$ap_dump_file
		else
			tmp_file=$src_dump_file
		fi
		generate_tcpdump_start_to_end_of_experiment $tcp_dump_file > $experiment_dump_file
		for c in $CLIENTS
		do 
			local packets=`get_total_packets_sent_by_client $experiment_dump_file "$HOSTNAME_PREFIX$c"`
			echo "$c $packets" >> $tmp_file
		done
	done

	# check if the files are similar
	diff $ap_dump_file $src_dump_file > /dev/null
	#diff $ap_dump_file $src_dump_file 
	if [[ $? != 0 ]]; then
		# they are not similar
		error "tcpdump files are not similar!"
	fi
	cat $src_dump_file > $data_file
	release_temp_file $experiment_dump_file
	release_temp_file $src_dump_file
	release_temp_file $ap_dump_file
}

generate_data_file_for_tcpdump_throughput_in_time()
{
	local experiment_dump_file=$1 # tcpdump file that has just the packets of the experiment
	# second inside the experiment you want start showing the progress
	local start_time=$TCPDUMP_THROUGHPUT_IN_TIME_START 
	# for how long the graph will show 
	local duration=$TCPDUMP_THROUGHPUT_IN_TIME_THROUGHPUT_PLOTS_DURATION 
	local max_packets=0
	local first_second=`head -1 $experiment_dump_file | cut -d '.' -f 1`
	local last_second=`tail -1 $experiment_dump_file | cut -d '.' -f 1`

	debug "$first_second $last_second"
	# if duration is more then the experiment, just contineu to the last_second of the experiment
	[[ $duration -gt $last_second ]] && duration=$last_second

	local data=""
	local counter=$first_second
	while [[ $counter -le $((first_second+duration)) ]]
	do
		data="$data\n$counter $((counter-first_second+1)) " # normalize the seconds to start with 0
		local tmp_file=`create_temp_file`

		# get all packets with time stamp of $second
		grep "^$counter" $experiment_dump_file > $tmp_file
		for c in $CLIENTS
		do 
			local packets=`get_total_packets_sent_by_client $tmp_file "$HOSTNAME_PREFIX$c"`

			# if there is no packets from $c, then put 0
			[[ -z $packets ]] && packets=0
			[[ $packets -gt $max_packets ]] && max_packets=$packets
			data="$data $packets"
		done
		release_temp_file $tmp_file
		((counter++))
	done
	TCPDUMP_THROUGHPUT_IN_TIME_MAX_PACKETS_SEND=$max_packets
	echo -e $data
}

common_plot_commands_for_throughput_plots()
{
        local title=$1
        local xlabel=$2
        local ylabel=$3
	cat <<- EOF
		set term png size $PNG_SIZE
		set title "$title"
		set boxwidth 0.5
		set xtics 1
		set style fill solid 0.25 border
		set xlabel '$xlabel'
		set ylabel '$ylabel'
		set yrange [0:$MAX_PACKETS_SEND]
		set xrange [0:$DURATION]
		EOF
}

generate_throughput_plot_for_each_client()
{
        local data_file=$1
        local output_file_name=$2
        local title=$3
        local xlabel=$4
        local ylabel=$5
        local plot_tmp_file=`create_temp_file`
	common_plot_commands_for_throughput_plots "$title" "$xlabel" "$ylabel" > $plot_tmp_file

	for c in $CLIENTS
	do
		verbose "Generating throughput plot for client$c titled '$title'"
        	echo "set output '$output_file_name.client$c.png'" >> $plot_tmp_file
		local col=$((c+1))
	        echo "plot \"$data_file\" using 1:$col with lines title 'client$c'" >> $plot_tmp_file
	done
        gnuplot < $plot_tmp_file
        release_temp_file $plot_tmp_file
}

generate_throughput_plot_clients_combined()
{
        local data_file=$1
        local output_file_name=$2
        local title=$3
        local xlabel=$4
        local ylabel=$5
        local plot_tmp_file=`create_temp_file`
	verbose "Generate tcpdump throughput plot for all clients combined"
	common_plot_commands_for_throughput_plots "$title" "$xlabel" "$ylabel" > $plot_tmp_file
        echo "set output '$output_file_name.png'" >> $plot_tmp_file
	echo -n "plot " >> $plot_tmp_file

	local first_client=$(echo $CLIENTS | cut -d ' ' -f 1)
	for c in $CLIENTS
	do
		[[ $c != $first_client ]] && echo -n ", " >> $plot_tmp_file
		local col=$((c+1))
	        echo -n "\"$data_file\" using 1:$col with lines title 'client$c'" >> $plot_tmp_file
	done
        gnuplot < $plot_tmp_file
        release_temp_file $plot_tmp_file
}

generate_data_file_for_throughput_plot()
{
	local experiment_dump_file=$1 # tcpdump file that has just the packets of the experiment
	local start_time=$2
	local duration=$3
	local descrete_time_stamp_data=$(create_temp_file)

	# get all the time stamps for the duration 
	local all_time_stamps=$(cat $experiment_dump_file | cut -d '.' -f 1 | sort | uniq | head -$((start_time+duration)) | tail -$duration)
	local base_time=$(echo $all_time_stamps | cut -d ' ' -f 1)
	for s in $all_time_stamps
	do
		local line="$((s-base_time+1)) "
		grep "^$s" $experiment_dump_file > $descrete_time_stamp_data
		for c in $CLIENTS
		do 
			local packets=$(get_total_packets_sent_by_client $descrete_time_stamp_data "$HOSTNAME_PREFIX$c")
			[[ -z $packets ]] && packets=0
			[[ $packets -gt $MAX_PACKETS_SEND ]] && MAX_PACKETS_SEND=$packets
			line="$line $packets"
		done
		echo $line
	done
	release_temp_file $duration_data
	release_temp_file $descrete_time_stamp_data
}

generate_tcpdump_plots()
{
	local workdir=$1
	local plots_dir=$2
	local plot_file_name=$3
	local plot_title=$4
	local experiment_dump_file=`create_temp_file`
	local data_dump_file=`create_temp_file`
	local throuput_plots_data=`create_temp_file`

	verbose "Generating tcpdump plots for $plot_file_name"
	local throuput_plots_dir=$plots_dir/throughput
	create_directory $throuput_plots_dir

	generate_tcpdump_start_to_end_of_experiment $workdir/ap.dump > $experiment_dump_file
	generate_data_file_for_tcpdump_throughput_in_time $experiment_dump_file > $data_dump_file

	verbose "Generating tcpdump plot of total MB sent by clients"
	generate_data_file_for_tcpdump_total_mb $data_dump_file $workdir
	plot_png $data_dump_file \
		"$plots_dir/$plot_file_name.tcpdump" \
		"Tcpdump $plot_title" "Clients" "packets sent" "1:2"

	verbose "Generating tcpdump throuput plots"
	generate_data_file_for_throughput_plot \
		$workdir/ap.dump \
		$THROUGHPUT_PLOTS_START_TIME \
		$THROUGHPUT_PLOTS_DURATION > $throuput_plots_data

	generate_throughput_plot_clients_combined \
		$throuput_plots_data \
		"$throuput_plots_dir/$plot_file_name.tcpdump.throughput.all.clients.combined" \
		"Distribution of clients\nTime $THROUGHPUT_PLOTS_START_TIME to $((THROUGHPUT_PLOTS_DURATION+THROUGHPUT_PLOTS_START_TIME))" \
		"time" \
		"packets" 

	generate_throughput_plot_for_each_client $throuput_plots_data \
		"$throuput_plots_dir/$plot_file_name.tcpdump.throughput" \
		"Distribution of clients\nTime $THROUGHPUT_PLOTS_START_TIME to $((THROUGHPUT_PLOTS_DURATION+THROUGHPUT_PLOTS_START_TIME))" \
		"time" \
		"packets"

	release_temp_file $data_dump_file
	release_temp_file $experiment_dump_file
	release_temp_file $throuput_plots_data
}

tcpdump_start_logging()
{
	local host=$1
	local interface=$2 # eth1,ath0...
	local port=$3
	local dumpfile=$TCPDUMP_CLIENTS_DUMPFILE_DIRECTORY/$host$TCPDUMP_CLIENTS_DUMPFILE_SUFFIX
	verbose "Running tcpdump on $host"
	ssh root@$host "tcpdump -i $interface -S -n -tt port $port > $dumpfile" 2> /dev/null &
}

tcpdump_stop_logging()
{
	local host=$1
	verbose "kill tcpdump on $host"
	ssh root@$host "killall tcpdump"
}

tcpdump_move_dumpfile()
{
	local host=$1
	local destdir=$2
	local filename=$host$TCPDUMP_CLIENTS_DUMPFILE_SUFFIX
	local src=$TCPDUMP_CLIENTS_DUMPFILE_DIRECTORY/$filename
	local dst=$destdir/$filename
	copy_file_from_host root $host $src $dst
	delete_file_on_host $host $src
}
