#!/bin/bash

# Globals
CLIENT_NAME_PREFIX="client"
REMOTE_KMSG_TMP_FILE=/tmp/kmsg
REMOTE_KMSG_FILE_SUFFIX=.kmsg

remote_run_command_on_client()
{
	local user=$1
	local host=$2
	local command=$3
	debug "Executing '$command' on $host"
	ssh $user@$host "$command"
}

remote_load_kernel_module_on_client()
{
	local host=$1
	local module=$2
	verbose "loading '$module' on $host"
	ssh root@$host "modprobe $module"
}

remote_copy_file_to_host()
{
	local user=$1
	local host=$2
	local file=$3
	verbose "copying file $file to $host"
	scp $file $user@$host:/tmp > /dev/null
}

remote_copy_file_from_host()
{
	local user=$1
	local host=$2
	local src=$3
	local dst=$4
	debug "copying file $user@$host:$src to $dst"
	scp $file $user@$host:$src $dst > /dev/null
}

remote_delete_file_on_host()
{
	local host=$1
	local file=$2
	debug "Deleting file $file from $host"
	ssh root@$host "rm -f $file" > /dev/null
}

remote_run_command_on_all_clients()
{
	local user=$1
	local command=$2
	local pids=
	for c in $CLIENTS
	do
		local client=$c
		# check if client is a number or a word like ap,src...
		[[ $c < "a" ]] && client="$CLIENT_NAME_PREFIX$c"
		remote_run_command_on_client $user $client "$command" &
		pids="$pids $!"
	done
	wait_for_pids $pids
}

remote_start_kmsg_logging()
{
	local host=$1
	verbose "Log kernel messages on $host"
	remote_run_command_on_client root $host "cat /proc/kmsg > /dev/null  & pid=\$! && sleep 1 && kill \$pid && cat /proc/kmsg  | gzip -c > $REMOTE_KMSG_TMP_FILE" &
}

remote_stop_kmsg_logging()
{
	local host=$1
	local destdir=$2
	local dst_file="$REMOTE_KMSG_TMP_FILE $destdir/$host$REMOTE_KMSG_FILE_SUFFIX"
	verbose "Stop kernel messages logging on $host"
	remote_run_command_on_client root $host "kill \$(ps fax | grep '/proc/kmsg'  | sed 's/^ //' | cut -d ' ' -f 1)"
	remote_copy_file_from_host root $host $dst_file
	remote_delete_file_on_host $host $REMOTE_KMSG_TMP_FILE
}

remote_network_interface_reset()
{
	local host=$1
	local iface=$2
	verbose "Reloading interface $iface on $host"
	remote_run_command_on_client root $host "ifdown $iface" 2> /dev/null
	remote_run_command_on_client root $host "ifup $iface" 2> /dev/null
	sleep 1
}
