#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/remote
source $LIB_PATH/madwifi

# Globals
TCP_CLIENT_PROBE_LOG_FILE=/tmp/tcpporbe
TCP_TCPPROBE_PROC_FILE=/proc/net/tcpprobe
TCP_TCPPROBE_LOG_SUFFIX=.tcpprobe
TCP_WINDOW="10m" # default 10 MB window
#TCP_PNG_SIZE="400,300"
TCP_PNG_SIZE="800,600"

# Columns position in tcpprobe file
TCP_TCPPROBE_COL_SEQ=11
TCP_TCPPROBE_COL_ACK_SEQ=12
TCP_TCPPROBE_COL_RAW_RTT=13
TCP_TCPPROBE_COL_SRTT=10

tcp_change_ca_algorithm_on_client()
{
	local algorithm=$1
	local host=$2
	local module="tcp_$algorithm"
	verbose "loading $algorithm on $host"
	[[ $algorithm -ne "reno" ]] && remote_load_kernel_module_on_client $host $module
	remote_run_command_on_client root $host "echo $algorithm > /proc/sys/net/ipv4/tcp_congestion_control"
}

tcp_start_tcpprobe_logging()
{
	local host=$1
	local port=$2
	local dumpfile=$TCP_CLIENT_PROBE_LOG_FILE
	verbose "Running tcp_probe on $host"
	remote_load_kernel_module_on_client $host "tcp_probe port=$port full=1"
	ssh root@$host "cat $TCP_TCPPROBE_PROC_FILE > $dumpfile" 2> /dev/null &
}

tcp_stop_tcpprobe_logging()
{
	local host=$1
	local dst_dir=$2
	verbose "stop tcp_probe on $host"
	remote_run_command_on_client root $host "ps -ef | grep $TCP_TCPPROBE_PROC_FILE | grep -v grep | awk '{print \$2}' | xargs kill"
	tcp_save_tcpprobe_log_file $host $dst_dir
}

tcp_save_tcpprobe_log_file()
{
	local host=$1
	local dst_dir=$2
	local src=$TCP_CLIENT_PROBE_LOG_FILE
	local dst=$dst_dir/$host$TCP_TCPPROBE_LOG_SUFFIX
	remote_copy_file_from_host root $host $src $dst
	remote_delete_file_on_host $host $src
}

tcp_plot_srtt_vs_raw_rtt()
{
	local duration=$1
	local host=$2
	local workdir=$3
	local plots_dir=$4
	local description=$5
	local probe_file=$workdir/$host$TCP_TCPPROBE_LOG_SUFFIX
	local filename_prefix="$plots_dir/time.$duration.srtt.vs.rawrtt.png"
	gnuplot <<- EOF
		set term png size $TCP_PNG_SIZE
		set output "$filename_prefix.png"
		set title "SRTT vs RTT\n$description"
		plot "$probe_file" using 1:$TCP_TCPPROBE_COL_SRTT with lines title 'srtt', \
		     "$probe_file" using 1:$TCP_TCPPROBE_COL_RAW_RTT with line title 'raw rtt'

		$(plots_replot_eps $filename_prefix)
		EOF
}

tcp_generate_madwifi_queue_delays_vs_rawrtt()
{
	local tcpprobe_dumpfile=$1
	local madwifi_dumpfile=$2
	local tcp_seq=
	local raw_rtt=
	local queue_delays_file=$(create_temp_file)
	local rtt_file=$(create_temp_file)
	local last_queue_delay=-1
	madwifi_generate_queue_delays_vs_tcp_sequence $madwifi_dumpfile > $queue_delays_file
	cat $tcpprobe_dumpfile | cut -d ' ' -f "$TCP_TCPPROBE_COL_ACK_SEQ $TCP_TCPPROBE_COL_RAW_RTT" > $rtt_file
	cat $rtt_file \
	| while read tcp_seq raw_rtt
	do
		local queue_delay=$(grep --max-count=1 $tcp_seq $queue_delays_file | cut -d ' ' -f 1)
		# ignore the similar acks in tcpprobe file
		if [[ $queue_delay -ne $last_queue_delay ]];then
			last_queue_delay=$queue_delay
			if [[ -n $queue_delay ]]; then
				echo $queue_delay $raw_rtt
			else
				debug "$tcp_seq don't have match in $tcpprobe_dumpfile"
			fi
		fi
	done
	release_temp_file $queue_delays_file
	release_temp_file $rtt_file
}

tcp_plot_madwifi_queue_vs_rawrtt()
{
	local duration=$1
	local host=$2
	local workdir=$3
	local plots_dir=$4
	local plot_description=$5
	local probe_file=$workdir/$host$TCP_TCPPROBE_LOG_SUFFIX
	local filtered_kmsg_file=$(madwifi_generate_filtered_kmsg_file $host $workdir)
	local filename_prefix="$plots_dir/time.$duration.$host.madwifi.queue.vs.rawrtt"
	local data_file=$filename_prefix.data
	tcp_generate_madwifi_queue_delays_vs_rawrtt $probe_file $filtered_kmsg_file > $data_file
	gnuplot <<- EOF
		set term png size $TCP_PNG_SIZE
		set output "$filename_prefix.png"
		set title "Madwifi queue delays vs raw RTT\n$plot_description"
		set xlabel 'queue delay'
		set ylabel 'raw rtt'
		plot "$data_file" using 1:2 with points

		$(plots_replot_eps $filename_prefix)
		EOF
}
