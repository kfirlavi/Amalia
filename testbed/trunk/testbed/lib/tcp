#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/remote
source $LIB_PATH/madwifi

# Globals
TCP_CLIENT_PROBE_LOG_FILE=/tmp/tcpporbe
TCP_TCPPROBE_PROC_FILE=/proc/net/tcpprobe
TCP_TCPPROBE_LOG_SUFFIX=.tcpprobe
TCP_CONGESTION_CONTROL_PROC_FILE=/proc/sys/net/ipv4/tcp_congestion_control
TCP_ABC_PROC_FILE=/proc/sys/net/ipv4/tcp_abc
TCP_TCPPROBE_DEFAULT_PARAM_FULL=1
TCP_WINDOW="10m" # default 10 MB window
#TCP_PNG_SIZE="400,300"
TCP_PNG_SIZE="800,600"

# Columns position in tcpprobe file
TCP_TCPPROBE_COL_TIME=1
TCP_TCPPROBE_COL_SOURCE_IP_PORT=2
TCP_TCPPROBE_COL_DEST_IP_PORT=3
TCP_TCPPROBE_COL_SKB_LEN=4
TCP_TCPPROBE_COL_SND_NXT=5
TCP_TCPPROBE_COL_SND_UNA=6
TCP_TCPPROBE_COL_SND_CWND=7
TCP_TCPPROBE_COL_SSTHRESH=8
TCP_TCPPROBE_COL_SND_WND=9
TCP_TCPPROBE_COL_SRTT=10
TCP_TCPPROBE_COL_SEQ=11
TCP_TCPPROBE_COL_ACK_SEQ=12
TCP_TCPPROBE_COL_RAW_RTT=13

tcp_change_ca_algorithm_on_client()
{
	local algorithm=$1
	local host=$2
	local module="tcp_$algorithm"
	verbose "loading congestion algorithm: $algorithm on $host"
	[[ $algorithm != "reno" ]] \
		&& remote_load_kernel_module_on_client $host $module
	remote_run_command_on_client root $host "echo $algorithm > $TCP_CONGESTION_CONTROL_PROC_FILE"
}

tcp_use_abc_on_client()
{
	local host=$1
	verbose "Using congestion abc method on $host"
	remote_run_command_on_client root $host "echo 1 > $TCP_ABC_PROC_FILE"
}

tcp_start_tcpprobe_logging()
{
	local host=$1
	local port=$2
	local full=$TCP_TCPPROBE_DEFAULT_PARAM_FULL
	[[ $3 -eq 0 ]] && full=0 # not the default value 
	local dumpfile=$TCP_CLIENT_PROBE_LOG_FILE
	verbose "Running tcp_probe on $host"
	tcp_kill_tcpprobe_remote_logging $host
	remote_load_kernel_module_on_client $host "tcp_probe port=$port full=1"
	remote_run_command_on_client root $host "cat $TCP_TCPPROBE_PROC_FILE | $IO_COMPRESS_COMMAND > $dumpfile" &
}

tcp_kill_tcpprobe_remote_logging()
{
	local host=$1
	remote_kill $host "$TCP_TCPPROBE_PROC_FILE"
}

tcp_stop_tcpprobe_logging()
{
	local host=$1
	local dst_dir=$2
	verbose "stop tcp_probe on $host"
	tcp_kill_tcpprobe_remote_logging $host
	tcp_save_tcpprobe_log_file $host $dst_dir
}

tcp_save_tcpprobe_log_file()
{
	local host=$1
	local dst_dir=$2
	local src=$TCP_CLIENT_PROBE_LOG_FILE
	local dst=$dst_dir/$host$TCP_TCPPROBE_LOG_SUFFIX
	remote_copy_file_from_host root $host $src $dst
	remote_delete_file_on_host $host $src
}

tcp_plot_srtt_vs_raw_rtt()
{
	local duration=$1
	local host=$2
	local workdir=$3
	local plots_dir=$4
	local description=$5
	local probe_file=$workdir/$host$TCP_TCPPROBE_LOG_SUFFIX
	local filename_prefix="$plots_dir/time.$duration.srtt.vs.rawrtt.png"
	gnuplot <<- EOF
		set term png size $(plots_get_plot_size)
		set output "$filename_prefix.png"
		set title "SRTT vs RTT\n$description"
		plot "$probe_file" using 1:$TCP_TCPPROBE_COL_SRTT with lines title 'srtt', \
		     "$probe_file" using 1:$TCP_TCPPROBE_COL_RAW_RTT with line title 'raw rtt'

		$(plots_replot_eps $filename_prefix)
		EOF
}

tcp_generate_madwifi_queue_delays_vs_rawrtt()
{
	local tcpprobe_dumpfile=$1
	local madwifi_dumpfile=$2
	local tcp_seq=
	local raw_rtt=
	local queue_delays_file=$(create_temp_file)
	local rtt_file=$(create_temp_file)
	local last_queue_delay=-1
	madwifi_generate_queue_delays_vs_tcp_sequence $madwifi_dumpfile > $queue_delays_file
	cat $tcpprobe_dumpfile | cut -d ' ' -f "$TCP_TCPPROBE_COL_ACK_SEQ $TCP_TCPPROBE_COL_RAW_RTT" > $rtt_file
	cat $rtt_file \
	| while read tcp_seq raw_rtt
	do
		local queue_delay=$(grep --max-count=1 $tcp_seq $queue_delays_file | cut -d ' ' -f 1)
		# ignore the similar acks in tcpprobe file
		if [[ $queue_delay -ne $last_queue_delay ]];then
			last_queue_delay=$queue_delay
			if [[ -n $queue_delay ]]; then
				echo $queue_delay $raw_rtt
			else
				debug "$tcp_seq don't have match in $tcpprobe_dumpfile"
			fi
		fi
	done
	release_temp_file $queue_delays_file
	release_temp_file $rtt_file
}

tcp_plot_madwifi_queue_vs_rawrtt()
{
	local duration=$1
	local host=$2
	local workdir=$3
	local plots_dir=$4
	local plot_description=$5
	local probe_file=$workdir/$host$TCP_TCPPROBE_LOG_SUFFIX
	local filtered_kmsg_file=$(madwifi_generate_filtered_kmsg_file $host $workdir)
	local filename_prefix="$plots_dir/time.$duration.$host.madwifi.queue.vs.rawrtt"
	local data_file=$filename_prefix.data
	tcp_generate_madwifi_queue_delays_vs_rawrtt $probe_file $filtered_kmsg_file > $data_file
	gnuplot <<- EOF
		set term png size $(plots_get_plot_size)
		set output "$filename_prefix.png"
		set title "Madwifi queue delays vs raw RTT\n$plot_description"
		set xlabel 'queue delay'
		set ylabel 'raw rtt'
		plot "$data_file" using 1:2 with points

		$(plots_replot_eps $filename_prefix)
		EOF
}

# will generate a uniq list of ids
# this could be used to find each flow data in probe file by flow id
tcp_get_flow_ids()
{
	local probe_file=$1
	grep -v -i "#" $probe_file \
		| grep -v ":22" \
		| cut -d ' ' -f 2 \
		| sort \
		| uniq
}

# function will write to $output_datafile
tcp_generate_gnuplot_index_datafile_by_flow_ids()
{
	local probe_file=$1
	local output_datafile=$2
	[[ -e $output_datafile ]] && return
	debug "generating gnuplot index datafile by flow ids from tcpprobe"
	for i in $(tcp_get_flow_ids $probe_file)
	do
		grep -i $i $probe_file
		echo -e '\n\n'
	done \
		| $IO_COMPRESS_COMMAND > $output_datafile
}

# gets gnuplot index datafile generated by tcp_generate_gnuplot_index_datafile_by_flow_ids()
# function will write to $output_datafile
tcp_generate_throughput_from_packet_sequence_numbers()
{
	local indexfile=$1
	local output_datafile=$2
	[[ -e $output_datafile ]] && return
	debug "generating throughput from packet sequence numbers"
	awk --non-decimal-data '
		BEGIN {t=-1; dt=1; }
		{
			if (NF < 6)
			{
				printf "\n\n"
			}
			else
			{
				seq=$6
				if (t<0 || t>$1) 
				{
					t=$1
					lastseq=seq
					print $1, 0
				} 
				if ($1-t >= dt) 
				{
					print $1, (seq-lastseq)*8/1024/1024/($1-t)
					t=$1
					lastseq=seq
				} 
			} 
		} 
	' $indexfile \
		| $IO_COMPRESS_COMMAND > $output_datafile
}

tcp_plot_cwnd_and_throughput()
{
	local filename_prefix=$1
	local datafile=$2 # tcpprobe log
	local plot_indexed_datafile=$filename_prefix.gnuplot.index.file.by.flow.ids
	local plot_throughput_datafile=$filename_prefix.tput.data
	local filename_prefix="$filename_prefix.cwnd.vs.tput"
	local flow_ids=$(tcp_get_flow_ids $datafile)
	verbose "generating cwnd and tput plot from tcpprobe log"
	tcp_generate_gnuplot_index_datafile_by_flow_ids $datafile $plot_indexed_datafile
	local plot_indexed_datafile_unzipped=$(io_uncompress_file $plot_indexed_datafile)
	tcp_generate_throughput_from_packet_sequence_numbers $plot_indexed_datafile_unzipped $plot_throughput_datafile
	local plot_throughput_datafile_unzipped=$(io_uncompress_file $plot_throughput_datafile)
	local j=0
	local comma=
	local plot_command="plot"
	for i in $flow_ids; do
		plot_command="$plot_command $comma '$plot_indexed_datafile_unzipped' index $j $(plots_skip_points) using $TCP_TCPPROBE_COL_TIME:$TCP_TCPPROBE_COL_SND_CWND with lines title 'flow $j cwnd', "
		plot_command="$plot_command '$plot_throughput_datafile_unzipped' index $j $(plots_skip_points) using 1:2 with points axes x1y2 title 'flow $j tput' "
		comma=","
		((j++))
	done

	gnuplot <<- EOF
		set term png size $(plots_get_plot_size)
		set output "$filename_prefix.png"
		$(plots_set_static_margins)
		$(plots_pointsize_command $POINTSIZE)
		set xlabel "time (s)"
		set ylabel "cwnd (packets)"
		set y2label "throughput (Mbps)"
		set ytics nomirror
		set y2range [0:]
		set y2tics
		set xrange [0:]
		$plot_command
		$(plots_replot_eps $filename_prefix)
		EOF
	#clean
	release_temp_file $plot_indexed_datafile_unzipped
	release_temp_file $plot_throughput_datafile_unzipped
}

tcp_plot_srtt_vs_raw_rtt()
{
	local filename_prefix=$1
	local datafile=$2 # tcpprobe log
	local plot_indexed_datafile=$filename_prefix.gnuplot.index.file.by.flow.ids
	local filename_prefix="$filename_prefix.srtt.vs.raw_rtt"
	local flow_ids=$(tcp_get_flow_ids $datafile)
	verbose "generating srtt and raw rtt plot from tcpprobe log"
	tcp_generate_gnuplot_index_datafile_by_flow_ids $datafile $plot_indexed_datafile
	local plot_indexed_datafile_unzipped=$(io_uncompress_file $plot_indexed_datafile)
	local reduce_factor=400
	local j=0
	local comma=
	local plot_command="plot"
	for i in $flow_ids; do
		plot_command="$plot_command $comma '$plot_indexed_datafile_unzipped' index $j $(plots_skip_points $reduce_factor) using $TCP_TCPPROBE_COL_TIME:$TCP_TCPPROBE_COL_SRTT with lines title 'flow $j srtt', "
		plot_command="$plot_command '$plot_indexed_datafile_unzipped' index $j $(plots_skip_points $reduce_factor) using $TCP_TCPPROBE_COL_TIME:$TCP_TCPPROBE_COL_RAW_RTT with points title 'flow $j raw rtt' "
		comma=","
		((j++))
	done

	gnuplot <<- EOF
		set term png size $(plots_get_plot_size)
		set output "$filename_prefix.png"
		$(plots_set_static_margins)
		$(plots_pointsize_command $POINTSIZE)
		set title "RTT from tcpprobe log"
		set xlabel "time (s)"
		set ylabel "rtt (ms)"
		set ytics nomirror
		set xrange [0:]
		$plot_command
		$(plots_replot_eps $filename_prefix)
		EOF
	#clean
	release_temp_file $plot_indexed_datafile_unzipped
}
