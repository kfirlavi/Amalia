#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/remote

# Globals
MADWIFI_TIMING_DUMPFILE_DIR="/tmp"
MADWIFI_TIMING_DUMPFILE_SUFFIX=".madwifi.timing"
MADWIFI_FILTERED_KMSG_SUFFIX=".madwifi.filtered"
MADWIFI_TIMING_DUMPFILE_COL_SEPERATOR="\t"
MADWIFI_TIMING_UDP_PACKET_SIZE=1534 # this is for filtering 
MADWIFI_TIMING_FILETER_QUEUE=2 # this is for filtering 
MADWIFI_TIMING_LINE_DESCRIPTOR="MADWIFI_DELAY_TIMESTAMPS" 
MADWIFI_PNG_SIZE="400,300"
MADWIFI_PNG_DOUBLE_SIZE="800,300"
MADWIFI_PNG_VERTICAL_DOUBLE_SIZE="400,600"
MADWIFI_DELAY_MAX_SPIKES_GAP=640 # 32 slots * 20 usec
MADWIFI_DELAY_MAX_SPIKES_GAP_DIAGRAM_PEDDING_START=100
MADWIFI_DELAY_MAX_SPIKES_GAP_DIAGRAM_PEDDING_END=30 
MADWIFI_DELAY_MAX_SPIKES_GAP_PLOT_NAME_SUFFIX=".zoom"
MADWIFI_MAX_NUMBER_OF_SEND_RETRIES=11

# Columns position in madwifi dumpfile
MADWIFI_COL_ENQUEUE=1
MADWIFI_COL_ACK=2
MADWIFI_COL_QUEUE=3
MADWIFI_COL_TOTAL_QUEUED=5
MADWIFI_COL_QUEUE_OCCUPANCY=9
MADWIFI_COL_NUMBER_OF_RETRIES=10
MADWIFI_COL_TCP_SEQ=12
MADWIFI_COL_TCP_ACK_SEQ=13

# filter lines for madwifi timing from kmsg file
madwifi_filter_kmsg()
{
	local file=$1 # gets kmsg file
	local tempfile=$(create_temp_file)
	verbose "Cleaning $file from kernel messages and $MADWIFI_TIMING_LINE_DESCRIPTOR"
	cat $file \
		| grep $MADWIFI_TIMING_LINE_DESCRIPTOR \
		| cut -f 2- \
		| grep -v "[a-Z]" \
		| awk -F "$MADWIFI_TIMING_DUMPFILE_COL_SEPERATOR" "(\$$MADWIFI_COL_QUEUE == $MADWIFI_TIMING_FILETER_QUEUE) {print \$0}"
}

# check that a column variabls in a file are distinct
madwifi_check_timing_dumpfile_column_is_distinct()
{
	local file=$1
	local col=$2
	local n1=$(cat $file | cut -f $col | sort -n | uniq | wc -l)
	local n2=$(cat $file | cut -f $col | wc -l)
	[[ $n1 -ne $n2 ]] && error "column $col is not distinct in $file"
}

madwifi_check_timing_dumpfile_column_sorted()
{
	local file=$1
	local col=$2
	local tempfile=$(create_temp_file)
	sort -n -k $col $file > $tempfile
	diff $file $tempfile > /dev/null
	[[ $? -ne 0 ]] && error "column $col not sorted in $file"
	release_temp_file $tempfile
}

# this method intended to make sure that we use just one queue
madwifi_check_timing_dumpfile_use_just_one_queue()
{
	local file=$1
	local number_of_queues=$(cat $file | cut -f $MADWIFI_COL_QUEUE | sort | uniq | wc -l)
	[[ $number_of_queues -ne 1 ]] && error "number of queues used are $number_of_queues != 1 in $file"
}

# Will check that the file is good
madwifi_check_timing_dumpfile()
{
	local file=$1 # gets a clean madwifi timing dump file

	# check that we are using just one queue
	madwifi_check_timing_dumpfile_use_just_one_queue $file

	# check that the timestemps columns are distinct
	madwifi_check_timing_dumpfile_column_is_distinct $file $MADWIFI_COL_ENQUEUE
	madwifi_check_timing_dumpfile_column_is_distinct $file $MADWIFI_COL_ACK

	# check that the timestamps of the enqueue and the ack are in sorted oreder
	madwifi_check_timing_dumpfile_column_sorted $file $MADWIFI_COL_ENQUEUE
	madwifi_check_timing_dumpfile_column_sorted $file $MADWIFI_COL_ACK
	madwifi_check_timing_dumpfile_column_sorted $file $MADWIFI_COL_TOTAL_QUEUED
}

madwifi_generate_queue_delays_vs_tcp_sequence()
{
	local file=$1 # gets a clean madwifi timing dump file
	madwifi_check_timing_dumpfile $file
	local prev_t_ack=0
	local t_enqueue=
	local t_ack=
	local queue_delay= 
	local mac_delay= 
	local total_delay=
	local tcp_seq=
	cat $file | cut -f "$MADWIFI_COL_ENQUEUE $MADWIFI_COL_ACK $MADWIFI_COL_TCP_SEQ" \
	| while read t_enqueue t_ack tcp_seq
	do
		if [[ $prev_t_ack -gt $t_enqueue ]]; then 
			# current packet was enqueued before 
			# previouse packet finished sending
			mac_delay=$((t_ack-prev_t_ack))
			total_delay=$((t_ack-t_enqueue))
			queue_delay=$((total_delay-mac_delay))
		else
			# previous packet got ack before this packet 
			# entered the queue
			queue_delay=0
		fi
		prev_t_ack=$t_ack
		echo $queue_delay $tcp_seq
	done
}

madwifi_calculate_delays_from_timestamps()
{
	local file=$1 # gets a clean madwifi timing dump file
	madwifi_check_timing_dumpfile $file
	local prev_t_ack=0
	local t_enqueue=
	local t_ack=
	local mac_delay= 
	local retries=
	cat $file | cut -f "$MADWIFI_COL_ENQUEUE $MADWIFI_COL_ACK $MADWIFI_COL_NUMBER_OF_RETRIES" \
	| while read t_enqueue t_ack retries
	do
		if [[ $prev_t_ack -gt $t_enqueue ]]; then 
			# current packet was enqueued before 
			# previouse packet finished sending
			mac_delay=$((t_ack-prev_t_ack))
		else
			# previous packet got ack before this packet 
			# entered the queue
			mac_delay=$((t_ack-t_enqueue))
		fi
		prev_t_ack=$t_ack
		echo $mac_delay $retries
	done
}

madwifi_calculate_queue_occupancy_vs_queueing_delay()
{
	local client=$1
	local workdir=$2
	local client_kmsg_file=$workdir/$client$REMOTE_KMSG_FILE_SUFFIX
	local prev_t_ack=0
	local t_enqueue=
	local t_ack=
	local queue_delay= 
	local mac_delay= 
	local total_delay=
	local queue_occupancy=
	local filtered_kmsg_file=$(madwifi_generate_filtered_kmsg_file $client $workdir)
	cat $filtered_kmsg_file | cut -f "$MADWIFI_COL_ENQUEUE $MADWIFI_COL_ACK $MADWIFI_COL_QUEUE_OCCUPANCY" \
	| while read t_enqueue t_ack queue_occupancy
	do
		if [[ $prev_t_ack -gt $t_enqueue ]]; then 
			# current packet was enqueued before 
			# previouse packet finished sending
			# this is how it should be done logicaly
			#mac_delay=$((t_ack-prev_t_ack))
			#total_delay=$((t_ack-t_enqueue))
			#queue_delay=$((total_delay-mac_delay))
			# this is after reducing the 3 equations to 1
			queue_delay=$(((prev_t_ack-t_enqueue)/1000))
		else
			# previous packet got ack before this packet 
			# entered the queue
			queue_delay=0
		fi
		prev_t_ack=$t_ack
		echo $queue_delay $queue_occupancy
	done
}

# find the 640 (32*20 usec) slots in delay file that have the most packets 
madwifi_find_boundry_of_delay()
{
	local file=$1 # gets a delay file generated by madwifi_generate_histogram_data_for_delay_frequency
	local delay_gap=$MADWIFI_DELAY_MAX_SPIKES_GAP
	local line=1
	local max=0
	local current_max=0
	local max_first_line=
	local max_last_line=
	local lines_in_file=$(wc -l $file)
	
	cat $file | while read delay packets retries
	do
		if [[ $line -le $delay_gap ]]; then 
			# we are in the first $delay_gap lines
			# sum number of packets
			((current_max=current_max+packets))
			max=$current_max
		else
			# line number is more then $delay_gap 
			# now we add the next line $packets and decrease by the first line
			# this will give us the next $delay_gap max packets
			local first_line=; ((first_line=line-delay_gap))
			local first_line_packets=$(head -$first_line $file | tail -1 | cut -d ' ' -f 2)
			local next_max=; ((next_max=current_max-first_line_packets+packets))
			#echo "line=$line first_line=$first_line first_line_packets=$first_line_packets next_max=$next_max=$max-$first_line_packets+$packets max=$max" >> /tmp/debug
			if [[ $next_max -gt $max ]]; then
				max=$next_max
				((max_first_line=first_line+1))
				max_last_line=$line
				#echo "line=$line max_first_line=$max_first_line max_last_line=$max_last_line max=$max" >> /tmp/debug
			fi
			current_max=$next_max
		fi
		((line++))
		echo "$max_first_line $max_last_line"
	done | tail -1 
	# the read creates a sub process which can't update the upper vars.
	# this is why I print every time the vars and then at the end | tail -1 to 
	# get the last line
}

madwifi_generate_histogram_data_for_delay_frequency()
{
	local file=$1 # gets a clean madwifi timing dump file
	local datafile=$(create_temp_file)
	madwifi_calculate_delays_from_timestamps $file > $datafile
	for delay in $(cat $datafile | cut -d ' ' -f 1 | sort -n | uniq)
	do
		local pre_minus=''
		if [[ $delay -lt 0 ]]; then
			local pre_minus='\'
			error "Delay value is negative ($delay)"
		fi
		local count=$(grep --count "^$pre_minus$delay " $datafile)
		local no_retry_count=$(grep --count "^$pre_minus$delay 0" $datafile)
		local retry_count=$(echo $count-$no_retry_count | bc)
		echo "$delay $count $retry_count"
		#echo -n "$delay $count"
		#local total_retries=0
		#for i in `seq 1 9`
		#do
		#	local count_retries=$(grep --count "^$pre_minus$delay $i" $datafile)
		#	((total_retries=total_retries+count_retries))
		#	echo -n " $count_retries"
		#done
		#echo " $total_retries"
	done
	release_temp_file $datafile
}

madwifi_generate_delay_histogram_plot()
{
	local datafile=$1 # gets a clean madwifi timing dump file
	local outfile_prefix=$2
	local plot_title=$3
	gnuplot <<- EOF > $outfile_prefix.png
		set term png size $MADWIFI_PNG_DOUBLE_SIZE
		set title "Delay slots $plot_title"
		set xlabel 'Delay'
		set y2tics 0, 1
		set ytics nomirror
		set y2range [0:$MADWIFI_MAX_NUMBER_OF_SEND_RETRIES]
		set multiplot

		set title "$plot_title\nDelay slots"
		set ylabel 'Packets'
		set origin 0.0,0.0
		set size 0.50,1.0
		plot \
			"$datafile" index 0 using 1:2 with linespoints title '' axis x1y1, \
			"$datafile" index 0 using 1:3 with points title 'retries' axis x1y2

		set title "$plot_title\nZoom 32 * $(wireless_get_current_slot_time)usec spikes"
		set y2label "Total retries per delay"
		set origin 0.5,0.0
		set size 0.50,1.0
		plot \
			"$datafile" index 1 using 1:2 with linespoints title '' axis x1y1, \
			"$datafile" index 1 using 1:3 with points title 'retries' axis x1y2
		EOF
}

madwifi_generate_delay_histogram_zoom_datafile()
{
	local delay_frequency_file=$1 # file generated by madwifi_generate_histogram_data_for_delay_frequency
	local outfile=$2
	local boundry=$(madwifi_find_boundry_of_delay $delay_frequency_file)
	local end_line=$(echo $boundry | cut -d ' ' -f 2)
	((end_line=end_line+MADWIFI_DELAY_MAX_SPIKES_GAP_DIAGRAM_PEDDING_END))
	cat $delay_frequency_file \
	| head -$end_line \
	| tail -$(echo $MADWIFI_DELAY_MAX_SPIKES_GAP+$MADWIFI_DELAY_MAX_SPIKES_GAP_DIAGRAM_PEDDING_START | bc)
}

madwifi_generate_delay_histogram_data_file_indexed()
{
		local filename_prefix=$1
		local delay_frequency_file=$(create_temp_file)
		local tempfile=$(create_temp_file)
		madwifi_generate_histogram_data_for_delay_frequency $dumpfile > $delay_frequency_file
		madwifi_generate_delay_histogram_zoom_datafile $delay_frequency_file > $tempfile
		cat $delay_frequency_file
		echo -e "\n\n"
		cat $tempfile
		release_temp_file $tempfile
		release_temp_file $delay_frequency_file
}

madwifi_generate_delay_histogram_plot_for_all_clients()
{
	local workdir=$1
	local plots_filename_head=$2
	local plots_title=$3
	for c in $CLIENTS
	do
		local dumpfile=$workdir/client$c$MADWIFI_TIMING_DUMPFILE_SUFFIX
		local filename_prefix="$plots_filename_head.client$c$MADWIFI_TIMING_DUMPFILE_SUFFIX"
		local delay_frequency_file="$filename_prefix.data"
		verbose "Generating madwifi delay histogram plot for client$c"
		madwifi_generate_delay_histogram_data_file_indexed $filename_prefix > $delay_frequency_file
		madwifi_generate_delay_histogram_plot $delay_frequency_file $filename_prefix "$plots_title"
	done
}

madwifi_plot_queue_occupancy_vs_queueing_delay_for_all_clients()
{
	local workdir=$1
	local plots_filename_head=$2
	local plots_title=$3
	for c in $CLIENTS
	do
		local client="client$c"
		local plot_file="$plots_dir/time.$duration.madwifi.queue.vs.rawrtt.png"
		local plot_prefix="$plots_filename_head.$client$MADWIFI_TIMING_DUMPFILE_SUFFIX.queue.delay.vs.queue.occupancy"
		local data_file="$plot_prefix.data"
		local plot_file="$plot_prefix.png"

		verbose "Generating madwifi queue occupancy vs queueing delay plot for $client"
		madwifi_calculate_queue_occupancy_vs_queueing_delay $client $workdir > $data_file
		gnuplot <<- EOF > $plot_file
			set term png size $MADWIFI_PNG_SIZE
			set title "Madwifi queue delays vs queue occupancy\nfor $client\n$plot_title"
			set xlabel 'queue occupancy'
			set ylabel 'queue delay (ms)'
			set yrange [0:]
			set xtics 5
			set mxtics 5
			set pointsize 0.2
			# lt 3 is blue
			plot "$data_file" using 2:1 with points lt 3 title ''
			EOF
	done
}

madwifi_generate_filtered_kmsg_file()
{
	local client=$1
	local workdir=$2
	local client_kmsg_file=$workdir/$client$REMOTE_KMSG_FILE_SUFFIX
	local filtered_kmsg_file=$client_kmsg_file$MADWIFI_FILTERED_KMSG_SUFFIX
	if [[ ! -f $filtered_kmsg_file ]]; then
		verbose "Generating madwifi filtered kmgs file for $client" 
		madwifi_filter_kmsg $client_kmsg_file > $filtered_kmsg_file
	fi
	echo $filtered_kmsg_file
}

madwifi_generate_queue_in_time_data()
{
	local client=$1
	local workdir=$2
	local client_kmsg_file=$workdir/$client$REMOTE_KMSG_FILE_SUFFIX
	local filtered_kmsg_file=$(madwifi_generate_filtered_kmsg_file $client $workdir)
	cat $filtered_kmsg_file | cut -f "$MADWIFI_COL_ENQUEUE $MADWIFI_COL_QUEUE_OCCUPANCY" --output-delimiter=" "
}

# this will calculate the queue occupancy 
# it will assign +1 for enqueue time and -1 for ack time. 
madwifi_generate_calculated_queue_in_time_data()
{
	local client=$1
	local workdir=$2
	local client_kmsg_file=$workdir/$client$REMOTE_KMSG_FILE_SUFFIX
	local t_enqueue= 
	local t_ack= 
	local ts_not_sorted=$(create_temp_file)
	local ts_sorted=$(create_temp_file)
	local filtered_kmsg_file=$(madwifi_generate_filtered_kmsg_file $client $workdir)
	cat $filtered_kmsg_file | cut -f "$MADWIFI_COL_ENQUEUE $MADWIFI_COL_ACK" \
	| while read t_enqueue t_ack
	do
		echo -e "$t_enqueue ++\n$t_ack --" >> $ts_not_sorted
	done 
	sort -n $ts_not_sorted > $ts_sorted
	local ts=
	local inc_or_dec=
	local queue=0
	cat $ts_sorted | cut -f "1 2" | while read ts inc_or_dec 
	do
		echo $ts $((queue$inc_or_dec))
	done
	release_temp_file ts_sorted
	release_temp_file ts_not_sorted
}

madwifi_normalize_timestamps()
{
	local file=$1
	local first_timestamp=$(head -1 $file | cut -d ' ' -f 1)
	local tmpfile=$(create_temp_file)
	cp $file $tmpfile
	verbose "Normalizing timestamps"
	cat $tmpfile | awk --assign ts="$first_timestamp" '{CONVFMT = "%.6f"} {print ($1-ts)/1000000 " " $2}' > $file
	release_temp_file $tmpfile
}

madwifi_plot_queue_in_time_for_all_clients()
{
	local workdir=$1
	local plots_filename_head=$2
	local plots_title=$3
	for c in $CLIENTS
	do
		local client="client$c"
		local plot_file="$plots_dir/time.$duration.madwifi.queue.in.time.png"
		local plot_prefix="$plots_filename_head.$client$MADWIFI_TIMING_DUMPFILE_SUFFIX.queue.in.time"
		local data_file="$plot_prefix.data"
		local plot_file="$plot_prefix.png"

		verbose "Generating madwifi queue in time plot for $client"
		madwifi_generate_queue_in_time_data $client $workdir > $data_file
		madwifi_normalize_timestamps $data_file
		echo -e "\n\n" >> $data_file
		local tempfile=$(create_temp_file)
		madwifi_generate_calculated_queue_in_time_data $client $workdir > $tempfile
		madwifi_normalize_timestamps $tempfile
		cat $tempfile >> $data_file
		release_temp_file $tempfile
		local max_queue_size=$(sort -n -k 2 $data_file  | tail -1 | cut -d ' ' -f 2)
		((max_queue_size++))
		gnuplot <<- EOF > $plot_file
			set term png size $MADWIFI_PNG_VERTICAL_DOUBLE_SIZE
			set xlabel 'Time (usec)'
			set format x "%.0f"
			set ylabel 'Queue Occupancy'
			set yrange [0:$max_queue_size]
			set multiplot

			set title "Madwifi queue in time\nfor $client\n$plot_title"
			set ylabel 'Packets'
			set origin 0.0,0.0
			set size 1.0,0.50
			plot "$data_file" index 0 using 1:2 with lines lt 3 title '' axis x1y1

			set title "Madwifi calculated queue in time\nfor $client\n$plot_title"
			set origin 0.0,0.5
			set size 1.0,0.50
			plot "$data_file" index 1 using 1:2 with lines lt 3 title '' axis x1y1
			EOF
	done
}

