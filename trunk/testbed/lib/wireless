#!/bin/bash

source $LIB_PATH/io
source $LIB_PATH/remote

# Globals
WIRELESS_CHANNEL=1
WIRELESS_ATHEROS_ABOLT=0
WIRELESS_TXPOWER_MIN=16
WIRELESS_TXQUEUE_LENGTH_MIN=1

#Default parameters are 
#CWmin 5 (31)
#CWmax 10 (1023)
#AIFS 2 (==DIFS)
#TXOP 0 (0 special == 1 packet, normally a time in usec)

# ap needs priority for its ack. Look on the paper: http://www.hamilton.ie/net/tcp-measure_final.pdf
WIRELESS_802_11x_AP_ACK_PRIORITY_CWMIN=2
WIRELESS_802_11x_CWMIN=5
WIRELESS_802_11x_CWMAX=10
WIRELESS_802_11x_AIFS=2
WIRELESS_802_11x_TXOP=0
WIRELESS_802_11x_QUEUES=$(seq 0 3)

WIRELESS_802_11x_MODE=11b # default mode

# 802_11b
WIRELESS_802_11b_MODE=11b
WIRELESS_802_11b_SLOT_TIME=20 #refers to the gap in time between 32 slots 
WIRELESS_802_11b_FIXEDRATE=11000

# 802_11g
WIRELESS_802_11g_MODE=11g
WIRELESS_802_11g_SLOT_TIME=9 #refers to the gap in time between 32 slots 
WIRELESS_802_11g_FIXEDRATE=54000

wireless_get_current_slot_time()
{
	case $WIRELESS_802_11x_MODE in
		11b)	echo $WIRELESS_802_11b_SLOT_TIME ;;
		11g)	echo $WIRELESS_802_11g_SLOT_TIME ;;
		*) 	echo "unknown slot time" ;;
	esac
}

wireless_802_11x_check_mode()
{
	local mode=$1
	if [[ $mode != $WIRELESS_802_11b_MODE && $mode != $WIRELESS_802_11g_MODE ]]
	then
		echo 1
	fi
}

wireless_802_11x_generate_get_commands()
{
	local interface=$1 #(ath0,eth0...)

	echo -n "iwpriv $interface get_mode ; "
	for queue in $WIRELESS_802_11x_QUEUES
	do
		for flag in 0 1
		do
			for c in cwmin cwmax aifs txoplimit
			do
				local command="iwpriv $interface get_$c $queue $flag"
				echo -n "echo $command; $command;"
			done
		done
	done
}

wireless_802_11x_generate_set_commands()
{
	local interface=$1 #(ath0,eth0...)
	local mode=$2
	local slottime=$3
	local fixedrate=$4
	local host=$5

	echo -n "iwpriv $interface mode $mode ; "
	echo -n "sysctl dev.wifi0.slottime=$slottime ; "
	echo -n "sysctl dev.wifi0.fixedrate=$fixedrate ; "
	for queue in $WIRELESS_802_11x_QUEUES
	do
		for flag in 0 1
		do
			# If host is the ap, then we give it different cwmin value for ack priority. 
			local host_cwmin=
			if [[ $flag -eq 0 ]]; then
				# ap
				host_cwmin=$WIRELESS_802_11x_AP_ACK_PRIORITY_CWMIN
			else
				# client
				host_cwmin=$WIRELESS_802_11x_CWMIN
			fi
			echo -n "iwpriv $interface cwmin $queue $flag $host_cwmin ; "
			echo -n "iwpriv $interface cwmax $queue $flag $WIRELESS_802_11x_CWMAX ; "
			echo -n "iwpriv $interface aifs $queue $flag $WIRELESS_802_11x_AIFS ; "
			echo -n "iwpriv $interface txoplimit $queue $flag $WIRELESS_802_11x_TXOP ; "
		done
	done
}

wireless_802_11x_set_network()
{
	local mode=$1
	verbose "set on all clients and ap 802.$mode flags"
	local slottime=
	local fixedrate=
	local set_network_flag=
	case $mode in
		11b)	slottime=$WIRELESS_802_11b_SLOT_TIME
			fixedrate=$WIRELESS_802_11b_FIXEDRATE
			;;
		11g)	slottime=$WIRELESS_802_11g_SLOT_TIME
			fixedrate=$WIRELESS_802_11g_FIXEDRATE
			;;
		*) 	set_network_flag=1
			error "No wireless mode \"$mode\". Not setting network." 
			;;
	esac
	if [[ -z $set_network_flag ]]; then
		local get_command=$(wireless_802_11x_generate_get_commands ath0 $mode $slottime $fixedrate)
		remote_run_command_on_client root ap "$get_command" 2>&1 > /tmp/wireless.settings.for.ap.$mode.$slottime.$fixedrate.before.log
		remote_run_command_on_all_clients root  "$get_command"

		remote_run_command_on_client root ap  "$(wireless_802_11x_generate_set_commands ath0 $mode $slottime $fixedrate ap)"
		remote_run_command_on_all_clients root  "$(wireless_802_11x_generate_set_commands ath0 $mode $slottime $fixedrate)"

		remote_run_command_on_client root ap "$get_command" 2>&1 > /tmp/wireless.settings.for.ap.$mode.$slottime.$fixedrate.after.log
		remote_run_command_on_all_clients root  "$get_command"
	fi
}

wireless_set_atheros_no_acceleration()
{
	local host=$1
	verbose "set on $host Atheros no acceleration flags"
	remote_run_command_on_client root $host "iwpriv ath0 abolt $WIRELESS_ATHEROS_ABOLT" 2>/dev/null
}

wireless_set_minimum_txpower()
{
	local host=$1
	verbose "set on $host txpower=${WIRELESS_TXPOWER_MIN}dBm"
	remote_run_command_on_client root $host "iwpriv ath0 txpower $WIRELESS_TXPOWER_MIN" 2>/dev/null
}

wireless_set_wifi0_txqueue_length_to_minimum()
{
	local host=$1
	verbose "Set $host wifi0 txqueue length to $WIRELESS_TXQUEUE_LENGTH_MIN"
	wireless_set_txqueue_length $host wifi0 $WIRELESS_TXQUEUE_LENGTH_MIN
}

wireless_set_txqueue_length()
{
	local host=$1
	local iface=$2 # the interface to change. For wireless it should be wifi0 (ath0 is a virtual, and so its txqueuelen is 0)
	local len=$3
	verbose "Set $iface txqueuelen to $len on $host"
	remote_run_command_on_client root $host "ifconfig $iface txqueuelen $len"
}

wireless_set_channel()
{
	local host=$1
	local iface=$2
	local channel=$3
	verbose "Set $host wireless channel to $channel"
	remote_run_command_on_client root $host "iwconfig $iface channel $channel"
}

wireless_reassociate()
{
	local host=$1
	local iface=$2
	verbose "Reassociate $host with ap"
	remote_run_command_on_client root $host "iwpriv $iface doth_reassoc 1"
}
