#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/remote

# Globals
ROUTER_DELAYS=0
ROUTER_DEFAULT_SRC_NETWORK="192.168.2.0/24"
ROUTER_DEFAULT_DST_NETWORK="192.168.3.0/24"
ROUTER_DUMMYNET_IN_PIPE=1
ROUTER_DUMMYNET_OUT_PIPE=2

router_disable_dummynet()
{
	local router=$1
	router_load_dummynet $router
	router_flush_dummynet $router
}

router_set_dummynet()
{
	local router=$1
	local latency=$2
	local bandwidth=$3
	local queue=$4
	local lossrate=$5
	local src_network=${6:-$ROUTER_DEFAULT_SRC_NETWORK}
	local dst_network=${7:-$ROUTER_DEFAULT_DST_NETWORK}

	router_load_dummynet $router
	router_flush_dummynet $router
	router_set_dummynet_pipes $router $src_network $dst_network
	router_configure_dummynet_pipes $router $latency $bandwidth $queue $lossrate
}

router_show_dummynet_settings()
{
	local router=$1
	verbose "Show dummynet settings"
	remote_run_command_on_client root $router "ipfw show"
	remote_run_command_on_client root $router "ipfw pipe $ROUTER_DUMMYNET_IN_PIPE show"
	remote_run_command_on_client root $router "ipfw pipe $ROUTER_DUMMYNET_OUT_PIPE show"
}

router_load_dummynet()
{
	local router=$1
	verbose "loading dummynet module on router"
	remote_run_command_on_client root $router "kldstat | grep dummynet &>/dev/null || kldload dummynet"
}

router_flush_dummynet()
{
	local router=$1
	verbose "flushing dummynet pipes on router"
	remote_run_command_on_client root $router "ipfw -f -q flush; ipfw -f -q pipe flush"
	sleep 1
}

router_set_dummynet_pipes()
{
	local router=$1
	local src_network=$2
	local dst_network=$3
	router_set_dummynet_in_pipe $router $src_network $dst_network
	router_set_dummynet_out_pipe $router $src_network $dst_network
}

router_set_dummynet_in_pipe()
{
	local router=$1
	local src_network=$2
	local dst_network=$3
	local pipe=$ROUTER_DUMMYNET_IN_PIPE
	verbose "setting up in pipe on $router dummynet"
	remote_run_command_on_client root $router "ipfw -q add pipe $pipe ip from $src_network to $dst_network in"
}

router_set_dummynet_out_pipe()
{
	local router=$1
	local src_network=$2
	local dst_network=$3
	local pipe=$ROUTER_DUMMYNET_OUT_PIPE
	verbose "setting up out pipe on $router dummynet"
	remote_run_command_on_client root $router "ipfw -q add pipe $pipe ip from $dst_network to $src_network out"
}

router_configure_dummynet_pipes()
{
	local router=$1
	local latency=$2
	local bandwidth=$3
	local queue=$4
	local lossrate=$5
	# delay should split between in and out pipes. 
	latency=$(echo $latency/2 | bc)
	queue=$(echo "$latency*$bandwidth*$queue*1000/8" | bc)
	router_configure_dummynet_in_pipe $router $latency $bandwidth $queue $lossrate
	router_configure_dummynet_out_pipe $router $latency $bandwidth $queue
}

router_configure_dummynet_in_pipe()
{
	local router=$1
	local latency=$2
	local bandwidth=$3
	local queue=$4
	local lossrate=$5
	local pipe=$ROUTER_DUMMYNET_IN_PIPE
	verbose "configure in pipe on $router dummynet with bandwidth ${bandwidth}Mbit/s queue ${queue}B delay ${latency}ms loss $lossrate"
	local command="ipfw pipe $pipe config bandwidth ${bandwidth}Mbit/s queue ${queue}B delay $latency plr $lossrate"
	remote_run_command_on_client root $router "$command"
}

router_configure_dummynet_out_pipe()
{
	local router=$1
	local latency=$2
	local bandwidth=$3
	local queue=$4
	local pipe=$ROUTER_DUMMYNET_OUT_PIPE
	verbose "configure out pipe on $router dummynet with bandwidth ${bandwidth}Mbit/s queue ${queue}B delay ${latency}ms"
	local command="ipfw pipe $pipe config bandwidth ${bandwidth}Mbit/s queue ${queue}B delay $latency"
	remote_run_command_on_client root $router "$command"
}
