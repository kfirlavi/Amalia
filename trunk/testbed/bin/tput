#!/bin/bash

# load libraries
LIB_PATH="$(dirname $0)/../lib"

source $LIB_PATH/io
source $LIB_PATH/configuration
source $LIB_PATH/opts
source $LIB_PATH/iperf

# Globals
SRC_UTIL=
DST_TEST=
DST_UTIL=
TIME=
BANDWITH=

usage()
{
prog=`basename $0`
cat << EOF
usage: $prog -s ip -d ip -u ip -t seconds [-v]

This script will run udp test to measure the cpacity of the link
EXAMPLE: $prog  -s src -u client2 -d wclient2 -t 10 -b 37 -v

OPTIONS:
	-s	source computer utility interface (ssh, setting up...) 
	-d	destination computer test interface
	-u	destination computer utility interface (ssh, setting up...)
	-t	time in seconds for the test
	-b	initial bandwidth to start with the test (assuming MB)
	-k	asume server is already up, so don't load it (for triggering more then one instance with one server)
	-o	run iperf once
	-h	Show this message
	-v 	verbose
EOF
}

get_opts()
{
	while getopts "s:d:u:t:b:kovh" options; do
		case $options in
			s) SRC_UTIL=$OPTARG;;
			d) DST_TEST=$OPTARG;;
			u) DST_UTIL=$OPTARG;;
			t) TIME=$OPTARG;;
			b) BANDWITH=$OPTARG;;
			k) DONT_LOAD_DST_SERVER=1;;
			o) ONCE=1;;
			v) VERBOSE=1;;
			h) usage
			   exit;;
			*) usage
			   exit 1;;
		esac
	done
}

check_for_required_opts()
{
	if [[ -z $SRC_UTIL || -z $DST_TEST || -z $DST_UTIL || -z $TIME || -z $BANDWITH ]]
	then 
		usage
		exit 1
	fi
}

process_options()
{
	opts_check_for_no_opts
	get_opts $OPTS_ARGS
	check_for_required_opts
}

# find the max bandwidth
# gets source utility address
#      dest test address 
#      time
#      bandwidth
find_max_bandwidth()
{
	local src=$1
	local dst=$2
	local time=$3
	local bandwidth=$4
	iperf_kill_process $src
	verbose "Run iperf on $src -> $dst"
	local loss=-1
	while [[ $loss != 0 ]]; do
		run_iperf_client_once $src $dst $time $bandwidth
		((bandwidth--))
		# wait for the hardware layer to drain
		if [[ $loss != 0 ]]; then 
			sleep 5 
		fi
	done
}

main()
{
	configuration_load
	process_options
	# don't create dest iperf if -k is on
	if [[ -z $DONT_LOAD_DST_SERVER ]]; then
		iperf_run_udp_server $DST_UTIL
	fi
	if [[ -z $ONCE ]]; then
		find_max_bandwidth $SRC_UTIL $DST_TEST $TIME $BANDWITH
	else
		run_iperf_client_once $SRC_UTIL $DST_TEST $TIME $BANDWITH
	fi
}
main
