#! /bin/bash -f

# run multiple on-off tcp sessions with pareto distributed connection sizes and exponential distributed idle times.

if [ $# -ne 8 ] 
then
        echo "Usage: $0 user client server dst src srcfile dstfile options"
	echo "options: [-t mintime] [-n numsessions] [-i meanidletime] [-a alpha] [-s scale]"
        exit 1
fi

function start-session() {
# run a single on-off tcp session with pareto distributed connection sizes and exponential distributed idle times.

echo "start session $SERVER $DST $MINTIME $MEANIDLETIME $SCALE $ALPHA `date +%s`"
local start=`date +%s`
local now=$start
while (( $now-$start <  $MINTIME ))
do
   # generate exponentially distributed sleep times, with mean $2
   # ... if $rand is a random integer uniformly distributed in 0-2^32,  
   # ... then -log($rand/2^32) is exponentially distributed with unit mean.
   # ... implement -log($rand/2^32) as -log($rand)+log(2^32) 
   local rand=`od -An -N4 -t uI /dev/urandom  `
   local delay=`echo "$rand $MEANIDLETIME" | awk '{printf "%.2f", (-log($1)+32*log(2))*$2 }'`
   # generate pareto distributed connection size, with location parameter xm=$3 and shape parameter $a=$4
   # ... for x uniform in [0,1], xm/x^(1+a) is pareto distributed with location xm and shape a
   # ... we implement x^1/a as exp[ 1/a log(x) ]. see http://wwwcsif.cs.ucdavis.edu/~kramer/papers/self_sim.pdf.
   local rand=`od -An -N4 -t uI /dev/urandom  `
   local size=`echo "$rand $SCALE $ALPHA" | awk '{printf "%.0f", $2/( exp( (log($1)-32*log(2))/$3 ) ) }'`
   local buffer=$size
   # limit application buffer to 20MB
   if [[ $buffer -gt 20000 ]]; then buffer=20000; fi
   sleep $delay
   echo $delay $size
   err=`ssh $SERVER "iperf -c $DST -n ${size}K -l ${buffer}K  2>&1 >/dev/null"`
   # if a problem, then kill this thread ...
   if [[ $err"x" != "x" ]]; then echo "Problem in on-off-iperf: start-session() !!"; kill ${SESSION_PID[*]} 2>/dev/null; exit 1; fi

   local now=`date +%s`
done
}

function start-sessions() {

local NUMSESSIONS=1
# default distribution parameter values correspond to usual web traffic models e.g. see 
# Willinger and ns2 docs ...
# where MINTIME is the min duration of the sessions, MEANIDLETIME specifies the mean (in seconds) 
# idle time, ALPHA the pareto shape paremeter, SCALE shifts the mean of the pareto distribution
local MINTIME=10
local MEANIDLETIME=1
local ALPHA=1.2
local SCALE=1.5
# override defaults via options passed ...
while getopts "t:n:i:a:s:" flag
do
  case $flag in
      t) MINTIME=$OPTARG;;
      n) NUMSESSIONS=$OPTARG;;
      i) MEANIDLETIME=$OPTARG;;
      a) ALPHA=$OPTARG;;
      s) SCALE=$OPTARG;;
      *) echo "Invalid option to on-off-iperf: start-sessions()"; exit 1;;
  esac
done

# find remaining args
local args=(${@:$OPTIND})
local SERVER=${args[0]}
local DST=${args[1]}

for ((i=0; i<$NUMSESSIONS; i++))
do
   # start a new thread for each session ...
   start-session   &
   local SESSION_PID[$i]=$!
done
wait ${SESSION_PID[*]}
}

start-sessions $8 $1@$3 $4 






